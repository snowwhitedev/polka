{
  "address": "0x727832DD0D7F537bC2dE9319b8033b8A8bAfe081",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_cohort",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_APR",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSize",
          "type": "uint256"
        }
      ],
      "name": "newRiskPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x77da3ecde10c475d9d4ca2d4d02fd2eaefdb2d5cd4b08ea914839de29af2a470",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x727832DD0D7F537bC2dE9319b8033b8A8bAfe081",
    "transactionIndex": 2,
    "gasUsed": "1328515",
    "logsBloom": "0x
    "blockHash": "0x9d9d66aebadd3813254a94bba852df475a3996e9e646f8e7bdfec1ee2f3c2175",
    "transactionHash": "0x77da3ecde10c475d9d4ca2d4d02fd2eaefdb2d5cd4b08ea914839de29af2a470",
    "logs": [],
    "blockNumber": 9159947,
    "cumulativeGasUsed": "1384713",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5cabb2a55b314b9284c553a699dd7a5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_APR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSize\",\"type\":\"uint256\"}],\"name\":\"newRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RiskPoolFactory.sol\":\"RiskPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/RiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./UnoERC20.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract RiskPool is IRiskPool, UnoERC20 {\\n    // ERC20 attributes\\n    string public name;\\n    string public symbol;\\n\\n    address public cohort;\\n    address public override currency; // for now we should accept only USDT\\n    // uint256 public stakingPeriod; // time in seconds\\n    uint256 public override maxSize;\\n    // maxSize\\n    uint256 public override APR; // 1000 - 1\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _cohort,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        cohort = _cohort;\\n        currency = _currency;\\n        APR = _APR;\\n        maxSize = _maxSize;\\n    }\\n\\n    modifier onlyCohort() {\\n        require(msg.sender == cohort, \\\"UnoRe: RiskPool Forbidden\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Users can stake only through Cohort\\n     */\\n    function enter(address _from, uint256 _amount) external override onlyCohort {\\n        // uint256 desired = balanceOf(_from) + _amount;\\n        // require(desired < maxInvestment, \\\"UnoRe: Overflow max staking value\\\");\\n        _mint(_from, _amount);\\n    }\\n\\n    function leave(address _to) external override onlyCohort {\\n        require(totalSupply() > 0, \\\"UnoRe: There's no remaining in the pool\\\");\\n        uint256 poolAmount = IERC20(currency).balanceOf(address(this));\\n        uint256 amount = (poolAmount * balanceOf(_to)) / totalSupply();\\n        _burn(_to, amount);\\n        TransferHelper.safeTransfer(currency, _to, amount);\\n    }\\n\\n    /**\\n     * @dev We can trust claim request if its sender is cohort\\n     */\\n    function requestClaim(address _from, uint256 _amount) external override onlyCohort {\\n        TransferHelper.safeTransfer(currency, _from, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3c4b1aab144786be41274779069393d2ffc171418577864ee6f1f424fd67e2\",\"license\":\"GPL-3.0\"},\"contracts/UnoERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IUnoERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract UnoERC20 is Context, IUnoERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x59b6500593674895bc263d53bdc721b654b68020d8569ba77abec21bd94f1106\",\"license\":\"MIT\"},\"contracts/factories/RiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../RiskPool.sol\\\";\\nimport \\\"../interfaces/IRiskPoolFactory.sol\\\";\\n\\ncontract RiskPoolFactory is IRiskPoolFactory {\\n    constructor() {}\\n\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external override returns (address) {\\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency, _APR, _maxSize);\\n        address _riskPoolAddr = address(_riskPool);\\n\\n        return _riskPoolAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x06ec8a3e73e4251c02789f5de9530c48e442fee8b4ad584be0d0c3cefbdd69b8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leave(address _to) external;\\n\\n    function requestClaim(address _from, uint256 _amount) external;\\n\\n    function currency() external view returns (address);\\n\\n    function APR() external view returns (uint256);\\n\\n    function maxSize() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x25ccfd36817280b5c14482cbc2b9cc1786476c5ab7484491d827affca0ed273b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x10672c3fe256e07ae1ca2fe1fc73bb150b4a4ba2f103931230c179259a97ab95\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IUnoERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IUnoERC20 {\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc9519cb3bed3505fe807dfe07ec9ed79a4c24fbed08ee2a3459222da6f367fab\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80634f35e6d514610030575b600080fd5b61004361003e36600461011c565b610059565b60405161005091906101e7565b60405180910390f35b6000808989898989898989604051610070906100ac565b6100819897969594939291906101fb565b604051809103906000f08015801561009d573d6000803e3d6000fd5b509a9950505050505050505050565b61148b8061025483390190565b80356001600160a01b03811681146100d057600080fd5b919050565b60008083601f8401126100e6578182fd5b50813567ffffffffffffffff8111156100fd578182fd5b60208301915083602082850101111561011557600080fd5b9250929050565b60008060008060008060008060c0898b031215610137578384fd5b883567ffffffffffffffff8082111561014e578586fd5b61015a8c838d016100d5565b909a50985060208b0135915080821115610172578586fd5b5061017f8b828c016100d5565b9097509550610192905060408a016100b9565b93506101a060608a016100b9565b92506080890135915060a089013590509295985092959890939650565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b600060c0825261020f60c083018a8c6101bd565b828103602084015261022281898b6101bd565b6001600160a01b03978816604085015295909616606083015250608081019290925260a0909101529594505050505056fe60806040523480156200001157600080fd5b506040516200148b3803806200148b833981016040819052620000349162000210565b855162000049906003906020890190620000a2565b5084516200005f906004906020880190620000a2565b50600580546001600160a01b039586166001600160a01b031991821617909155600680549490951693169290921790925560089190915560075550620003019050565b828054620000b090620002ae565b90600052602060002090601f016020900481019282620000d457600085556200011f565b82601f10620000ef57805160ff19168380011785556200011f565b828001600101855582156200011f579182015b828111156200011f57825182559160200191906001019062000102565b506200012d92915062000131565b5090565b5b808211156200012d576000815560010162000132565b80516001600160a01b03811681146200016057600080fd5b919050565b600082601f83011262000176578081fd5b81516001600160401b0380821115620001935762000193620002eb565b6040516020601f8401601f1916820181018381118382101715620001bb57620001bb620002eb565b6040528382528584018101871015620001d2578485fd5b8492505b83831015620001f55785830181015182840182015291820191620001d6565b838311156200020657848185840101525b5095945050505050565b60008060008060008060c0878903121562000229578182fd5b86516001600160401b038082111562000240578384fd5b6200024e8a838b0162000165565b9750602089015191508082111562000264578384fd5b506200027389828a0162000165565b955050620002846040880162000148565b9350620002946060880162000148565b92506080870151915060a087015190509295509295509295565b600281046001821680620002c357607f821691505b60208210811415620002e557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61117a80620003116000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a9059cbb11610071578063a9059cbb1461021c578063bd30558e1461022f578063bedf77a614610237578063dd62ed3e1461024a578063e5a6b10f1461025d57610116565b806370a08231146101db5780637e348b7d146101ee57806395d89b4114610201578063a457c2d71461020957610116565b806318160ddd116100e957806318160ddd1461018357806323b872dd146101985780632565b159146101ab578063313ce567146101b357806339509351146101c857610116565b806301e51e971461011b57806306fdde0314610130578063095ea7b31461014e57806313176a401461016e575b600080fd5b61012e610129366004610bf4565b610265565b005b6101386102b3565b6040516101459190610ca9565b60405180910390f35b61016161015c366004610bf4565b610341565b6040516101459190610c9e565b61017661035e565b6040516101459190610c71565b61018b61036d565b6040516101459190611042565b6101616101a6366004610bb9565b610373565b61018b610403565b6101bb610409565b604051610145919061104b565b6101616101d6366004610bf4565b61040e565b61018b6101e9366004610b66565b610462565b61012e6101fc366004610bf4565b610481565b6101386104b5565b610161610217366004610bf4565b6104c2565b61016161022a366004610bf4565b61053b565b61018b61054f565b61012e610245366004610b66565b610555565b61018b610258366004610b87565b610678565b6101766106a3565b6005546001600160a01b031633146102985760405162461bcd60e51b815260040161028f90610f8f565b60405180910390fd5b6006546102af906001600160a01b031683836106b2565b5050565b600380546102c0906110f3565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec906110f3565b80156103395780601f1061030e57610100808354040283529160200191610339565b820191906000526020600020905b81548152906001019060200180831161031c57829003601f168201915b505050505081565b600061035561034e6107b4565b84846107b8565b50600192915050565b6005546001600160a01b031681565b60025490565b600061038084848461086c565b6001600160a01b0384166000908152600160205260408120816103a16107b4565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156103e45760405162461bcd60e51b815260040161028f90610e30565b6103f8856103f06107b4565b8584036107b8565b506001949350505050565b60075481565b601290565b600061035561041b6107b4565b8484600160006104296107b4565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461045d9190611059565b6107b8565b6001600160a01b0381166000908152602081905260409020545b919050565b6005546001600160a01b031633146104ab5760405162461bcd60e51b815260040161028f90610f8f565b6102af8282610996565b600480546102c0906110f3565b600080600160006104d16107b4565b6001600160a01b039081168252602080830193909352604091820160009081209188168152925290205490508281101561051d5760405162461bcd60e51b815260040161028f90610fc6565b6105316105286107b4565b858584036107b8565b5060019392505050565b60006103556105486107b4565b848461086c565b60085481565b6005546001600160a01b0316331461057f5760405162461bcd60e51b815260040161028f90610f8f565b600061058961036d565b116105a65760405162461bcd60e51b815260040161028f90610de9565b6006546040516370a0823160e01b81526000916001600160a01b0316906370a08231906105d7903090600401610c71565b60206040518083038186803b1580156105ef57600080fd5b505afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190610c3d565b9050600061063361036d565b61063c84610462565b6106469084611091565b6106509190611071565b905061065c8382610a5e565b600654610673906001600160a01b031684836106b2565b505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546001600160a01b031681565b600080846001600160a01b031663a9059cbb85856040516024016106d7929190610c85565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107259190610c55565b6000604051808303816000865af19150503d8060008114610762576040519150601f19603f3d011682016040523d82523d6000602084013e610767565b606091505b50915091508180156107915750805115806107915750808060200190518101906107919190610c1d565b6107ad5760405162461bcd60e51b815260040161028f90610f42565b5050505050565b3390565b6001600160a01b0383166107de5760405162461bcd60e51b815260040161028f90610efe565b6001600160a01b0382166108045760405162461bcd60e51b815260040161028f90610d61565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061085f908590611042565b60405180910390a3505050565b6001600160a01b0383166108925760405162461bcd60e51b815260040161028f90610eb9565b6001600160a01b0382166108b85760405162461bcd60e51b815260040161028f90610cdc565b6108c3838383610673565b6001600160a01b038316600090815260208190526040902054818110156108fc5760405162461bcd60e51b815260040161028f90610da3565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610933908490611059565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161097d9190611042565b60405180910390a3610990848484610673565b50505050565b6001600160a01b0382166109bc5760405162461bcd60e51b815260040161028f9061100b565b6109c860008383610673565b80600260008282546109da9190611059565b90915550506001600160a01b03821660009081526020819052604081208054839290610a07908490611059565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a4a908590611042565b60405180910390a36102af60008383610673565b6001600160a01b038216610a845760405162461bcd60e51b815260040161028f90610e78565b610a9082600083610673565b6001600160a01b03821660009081526020819052604090205481811015610ac95760405162461bcd60e51b815260040161028f90610d1f565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610af89084906110b0565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b3b908690611042565b60405180910390a361067383600084610673565b80356001600160a01b038116811461047c57600080fd5b600060208284031215610b77578081fd5b610b8082610b4f565b9392505050565b60008060408385031215610b99578081fd5b610ba283610b4f565b9150610bb060208401610b4f565b90509250929050565b600080600060608486031215610bcd578081fd5b610bd684610b4f565b9250610be460208501610b4f565b9150604084013590509250925092565b60008060408385031215610c06578182fd5b610c0f83610b4f565b946020939093013593505050565b600060208284031215610c2e578081fd5b81518015158114610b80578182fd5b600060208284031215610c4e578081fd5b5051919050565b60008251610c678184602087016110c7565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152610cc88160408501602087016110c7565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526027908201527f556e6f52653a2054686572652773206e6f2072656d61696e696e6720696e20746040820152661a19481c1bdbdb60ca1b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252602d908201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b60208082526019908201527f556e6f52653a205269736b506f6f6c20466f7262696464656e00000000000000604082015260600190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b6000821982111561106c5761106c61112e565b500190565b60008261108c57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156110ab576110ab61112e565b500290565b6000828210156110c2576110c261112e565b500390565b60005b838110156110e25781810151838201526020016110ca565b838111156109905750506000910152565b60028104600182168061110757607f821691505b6020821081141561112857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122002947dbdc398215bbab50fb73f8e4a29c55a97f42fba06ee4f680998725d5a0a64736f6c63430008000033a264697066735822122077bf9b1bdec1c2b9d06a0d04ec867c350a221aad6ef069f508b41541c21c266764736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}