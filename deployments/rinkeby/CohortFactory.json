{
  "address": "0x1307a65a81f1E5087F060AC5612A74248310C8aC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_actuary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "actuary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cohortStartCapital",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_premiumFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minPremium",
          "type": "uint256"
        }
      ],
      "name": "newCohort",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c14d7e65dceafec028c6899487a21a7c7abafd0bc2c0a3b9e4e0f4588f32815",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x1307a65a81f1E5087F060AC5612A74248310C8aC",
    "transactionIndex": 2,
    "gasUsed": "2667760",
    "logsBloom": "0x
    "blockHash": "0xab55aa7afcf4985400e928cc32c195c5b19ff18d6a031e6a7623e6b418ddeab8",
    "transactionHash": "0x8c14d7e65dceafec028c6899487a21a7c7abafd0bc2c0a3b9e4e0f4588f32815",
    "logs": [],
    "blockNumber": 9164646,
    "cumulativeGasUsed": "2963523",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1ed1d4d6B6898DF8531CfA68094a7DeD9338d76e"
  ],
  "solcInputHash": "5cabb2a55b314b9284c553a699dd7a5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_actuary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"actuary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cohortStartCapital\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_premiumFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPremium\",\"type\":\"uint256\"}],\"name\":\"newCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/CohortFactory.sol\":\"CohortFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/ICohort.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./interfaces/IPremiumPoolFactory.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract Cohort is ICohort {\\n    // It should be okay if Protocol is struct\\n    struct Protocol {\\n        string name; // protocol name\\n        address protocolAddress; // Address of that protocol\\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\\n        string premiumDescription;\\n        uint256 coverDuration; // Duration of the protocol cover products\\n        uint16 avgLR; // LR means Loss Ratio, default 1000 = 1\\n        bool exist; // initial true\\n    }\\n\\n    address public factory;\\n    address public claimAssessor;\\n    address public premiumPool;\\n    address public owner;\\n    string public name;\\n    // uint public TVLc;\\n    // uint public combinedRisk;\\n    uint256 public duration;\\n    // uint8 public status;\\n    uint256 public cohortActiveFrom;\\n\\n    // for now we set this as constant\\n    uint256 public COHORT_START_CAPITAL;\\n\\n    mapping(uint16 => Protocol) public getProtocol;\\n    uint16[] private allProtocols;\\n\\n    mapping(uint8 => address) public getRiskPool;\\n    uint8[] private allRiskPools;\\n\\n    // pool => amount => pool capital\\n    mapping(address => uint256) private poolCapital;\\n    uint256 private totalAPRofPools;\\n    uint256 private MAX_INTEGER = type(uint256).max;\\n\\n    event RiskPoolCreated(address indexed cohort, address indexed pool);\\n    event StakedInPool(address indexed staker, address indexed pool, uint256 amount);\\n    event LeftPool(address indexed staker, address indexed pool);\\n    event ClaimPaid(address indexed claimer, uint256 _protocolIdx, uint256 amount);\\n\\n    constructor(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital\\n    ) {\\n        owner = _owner;\\n        name = _name;\\n        COHORT_START_CAPITAL = _cohortStartCapital;\\n        claimAssessor = _claimAssessor;\\n        factory = msg.sender;\\n    }\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UnoRe: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    modifier onlyCohortOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function allProtocolsLength() external view returns (uint256) {\\n        return allProtocols.length;\\n    }\\n\\n    function allRiskPoolLength() public view returns (uint256) {\\n        return allRiskPools.length;\\n    }\\n\\n    function createPremiumPool(\\n        address _factory,\\n        address _currency,\\n        uint256 _minimum\\n    ) external {\\n        require(msg.sender == factory, \\\"UnoRe: Forbidden\\\");\\n        premiumPool = IPremiumPoolFactory(_factory).newPremiumPool(_currency, _minimum);\\n    }\\n\\n    // This action can be done only by cohort owner\\n    function addProtocol(\\n        string calldata _name,\\n        address _protocolAddress,\\n        string calldata _productType,\\n        string calldata _premiumDescription,\\n        uint256 _coverDuration\\n    ) external onlyCohortOwner {\\n        uint16 lastIdx = allProtocols.length > 0 ? allProtocols[allProtocols.length - 1] + 1 : 0;\\n        allProtocols.push(lastIdx);\\n        getProtocol[lastIdx] = Protocol({\\n            name: _name,\\n            protocolAddress: _protocolAddress,\\n            productType: _productType,\\n            premiumDescription: _premiumDescription,\\n            coverDuration: _coverDuration,\\n            avgLR: 1000, //\\n            exist: true\\n        });\\n\\n        if (duration < _coverDuration) {\\n            duration = _coverDuration;\\n        }\\n    }\\n\\n    /**\\n     * @dev create Risk pool from cohort owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external onlyCohortOwner returns (address pool) {\\n        uint256 len = allRiskPools.length;\\n        pool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency, _APR, _maxSize);\\n\\n        uint8 lastIdx = len > 0 ? allRiskPools[len - 1] + 1 : 0;\\n        allRiskPools.push(lastIdx);\\n        getRiskPool[lastIdx] = pool;\\n        totalAPRofPools += _APR;\\n        poolCapital[pool] = MAX_INTEGER;\\n        emit RiskPoolCreated(address(this), pool);\\n    }\\n\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external {\\n        TransferHelper.safeTransferFrom(IPremiumPool(premiumPool).currency(), msg.sender, premiumPool, _amount);\\n        IPremiumPool(premiumPool).depositPremium(_protocolIdx, _amount);\\n    }\\n\\n    function enterInPool(\\n        address _from,\\n        address _pool,\\n        uint256 _amount\\n    ) external {\\n        require(cohortActiveFrom == 0, \\\"UnoRe: Staking was Ended\\\");\\n        require(poolCapital[_pool] == MAX_INTEGER || poolCapital[_pool] != 0, \\\"UnoRe: RiskPool not exist\\\");\\n        uint256 _poolMaxSize = IRiskPool(_pool).maxSize();\\n        uint256 _currentSupply = IERC20(_pool).totalSupply();\\n        require(_poolMaxSize >= (_amount + _currentSupply), \\\"UnoRe: RiskPool overflow\\\");\\n        address token = IRiskPool(_pool).currency();\\n        TransferHelper.safeTransferFrom(token, _from, _pool, _amount);\\n        IRiskPool(_pool).enter(_from, _amount);\\n        poolCapital[_pool] == MAX_INTEGER ? poolCapital[_pool] = _amount : poolCapital[_pool] += _amount;\\n        _startCohort();\\n\\n        emit StakedInPool(_from, _pool, _amount);\\n    }\\n\\n    /**\\n     * @dev for now we assume protocols send premium to cohort smart contract\\n     */\\n    function leaveFromPool(address _to, address _pool) external lock {\\n        require(cohortActiveFrom != 0 && block.timestamp - cohortActiveFrom > duration, \\\"UnoRe: Forbidden\\\");\\n        require(poolCapital[_pool] != 0 && poolCapital[_pool] != MAX_INTEGER, \\\"UnoRe: RiskPool not exist or empty\\\");\\n        // Withdraw remaining from pool\\n        uint256 amount = IERC20(_pool).balanceOf(_to);\\n        // get premium rewards\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\n            uint16 protocolIdx = allProtocols[ii];\\n            uint256 _totalPr = IPremiumPool(premiumPool).premiumRewardOf(protocolIdx);\\n            uint256 _pr = (((_totalPr * amount) / poolCapital[_pool]) * IRiskPool(_pool).APR()) / totalAPRofPools;\\n            IPremiumPool(premiumPool).withdrawPremium(_to, protocolIdx, _pr);\\n        }\\n\\n        IRiskPool(_pool).leave(_to);\\n        emit LeftPool(_to, _pool);\\n    }\\n\\n    /**\\n     * @dev for now all premiums and risk pools are paid in stable coin\\n     * @dev we can trust claim request from ClaimAssesor\\n     */\\n    function requestClaim(\\n        address _from,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external override lock returns (bool) {\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\n        require(block.timestamp - cohortActiveFrom <= duration && cohortActiveFrom != 0, \\\"UnoRe: Forbidden\\\");\\n        (bool hasEnough, uint256 minPremium) = hasEnoughCapital(_protocolIdx, _amount);\\n        require(hasEnough == true, \\\"UnoRe: Capital is not enough\\\");\\n\\n        uint256 currentPremium = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\n        // We should remain minimum amount in premium pool\\n        if (_amount + minPremium <= currentPremium) {\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _amount);\\n            emit ClaimPaid(_from, _protocolIdx, _amount);\\n            return true;\\n        }\\n        if (currentPremium > minPremium) {\\n            // Tranfer from premium\\n            uint256 _paid = currentPremium - minPremium;\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _paid);\\n            _amount -= _paid;\\n        }\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\n            if (_amount == 0) break;\\n            address _pool = getRiskPool[allRiskPools[ii]];\\n            address _token = IRiskPool(_pool).currency();\\n            uint256 _poolCapital = IERC20(_token).balanceOf(_pool);\\n            if (_amount <= _poolCapital) {\\n                _requestClaimToPool(_from, _amount, _pool);\\n                _amount = 0;\\n            } else {\\n                _requestClaimToPool(_from, _poolCapital, _pool);\\n                _amount -= _poolCapital;\\n            }\\n        }\\n        emit ClaimPaid(_from, _protocolIdx, _amount);\\n        return true;\\n    }\\n\\n    function _startCohort() private {\\n        uint256 totalCapital = 0;\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\n            address pool = getRiskPool[allRiskPools[ii]];\\n            // for now we use total supply cause we deal only Stable coins\\n            totalCapital += IERC20(pool).totalSupply();\\n        }\\n        if (totalCapital >= COHORT_START_CAPITAL) {\\n            cohortActiveFrom = block.timestamp;\\n        }\\n    }\\n\\n    function hasEnoughCapital(uint16 _protocolIdx, uint256 _amount) private returns (bool hasEnough, uint256 minPremium) {\\n        uint256 totalCapital = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\n        uint256 len = allRiskPools.length;\\n        bool isLastPool = true;\\n        for (uint256 ii = 0; ii < len; ii++) {\\n            address pool = getRiskPool[allRiskPools[ii]];\\n            // address token = IRiskPool(pool).currency();\\n            // totalCapital += IERC20(token).balanceOf(pool);\\n            // for now we use total supply cause we deal only stable coins\\n            uint256 _ts = IERC20(pool).totalSupply();\\n            totalCapital += _ts;\\n            if (isLastPool && _ts != 0 && ii != len - 1) {\\n                isLastPool = false;\\n            }\\n        }\\n        minPremium = isLastPool ? 0 : IPremiumPool(premiumPool).minimumPremium();\\n        hasEnough = totalCapital >= (_amount + minPremium);\\n    }\\n\\n    /**\\n     * @dev to save gas fee, we need this function\\n     */\\n    function _requestClaimToPool(\\n        address _from,\\n        uint256 _amount,\\n        address _pool\\n    ) private {\\n        IRiskPool(_pool).requestClaim(_from, _amount);\\n    }\\n\\n    function setDuration(uint256 _duration) external onlyCohortOwner {\\n        duration = _duration;\\n    }\\n\\n    function changePoolPriority(uint8 _prio1, uint8 _prio2) public {\\n        address _temp = getRiskPool[allRiskPools[_prio1]];\\n        getRiskPool[_prio1] = getRiskPool[allRiskPools[_prio2]];\\n        getRiskPool[_prio2] = _temp;\\n    }\\n\\n    function transferPremium(\\n        uint16 _protocolIdx,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyCohortOwner {\\n        IPremiumPool(premiumPool).transferAsset(_protocolIdx, _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x16553c6eca0a181be56bb05e93820c3203a4877bf287ced158ecab289bf30207\",\"license\":\"GPL-3.0\"},\"contracts/factories/CohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../Cohort.sol\\\";\\nimport \\\"../interfaces/ICohortFactory.sol\\\";\\n\\ncontract CohortFactory is ICohortFactory {\\n    address public actuary;\\n\\n    constructor(address _actuary) {\\n        actuary = _actuary;\\n    }\\n\\n    function newCohort(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital,\\n        address _premiumFactory,\\n        address _premiumCurrency,\\n        uint256 _minPremium\\n    ) external override returns (address) {\\n        require(msg.sender == actuary, \\\"Uno Re:Forbidden\\\");\\n        Cohort _cohort = new Cohort(_owner, _name, _claimAssessor, _cohortStartCapital);\\n\\n        _cohort.createPremiumPool(_premiumFactory, _premiumCurrency, _minPremium);\\n        return address(_cohort);\\n    }\\n}\\n\",\"keccak256\":\"0x7650b7478f982c0784af493c585566c2abaf1bf4cad4fc9fd59e059bb685813a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICohort.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ICohort {\\n    function requestClaim(\\n        address _from,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0f6195eef964667dbe220f16118af3d009199905e5171fe68b2cd421ae40dd04\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ICohortFactory {\\n    function newCohort(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital,\\n        address _premiumFactory,\\n        address _premiumCurrency,\\n        uint256 _minPremium\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xcdb51932d725209a9cf85aae2218fef0de61dbe26c0184afafb2175c7e8acca7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPool {\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external;\\n\\n    function withdrawPremium(\\n        address _to,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferAsset(\\n        uint16 _protocolIdx,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function minimumPremium() external returns (uint256);\\n\\n    function balanceOf(uint16 _protocolIdx) external view returns (uint256);\\n\\n    function premiumRewardOf(uint16 _protocolIdx) external returns (uint256);\\n\\n    function currency() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa9523a67cb04131a34890d14109980da710ef5c1872903406f08d570a0abc118\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPremiumPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPoolFactory {\\n    function newPremiumPool(address _currency, uint256 _minimum) external returns (address);\\n}\\n\",\"keccak256\":\"0x83066636bc349858740476b3e146f3a4a6584333bbb9363f1805cb7ec9946bec\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leave(address _to) external;\\n\\n    function requestClaim(address _from, uint256 _amount) external;\\n\\n    function currency() external view returns (address);\\n\\n    function APR() external view returns (uint256);\\n\\n    function maxSize() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x25ccfd36817280b5c14482cbc2b9cc1786476c5ab7484491d827affca0ed273b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x10672c3fe256e07ae1ca2fe1fc73bb150b4a4ba2f103931230c179259a97ab95\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7650ccd26cfa42968350d9c477f55f98059d74e0f173a1da45b06c2607e705d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612f74380380612f7483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b612ee3806100916000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637a95129b1461003b578063ba332fa414610059575b600080fd5b61004361006c565b604051610050919061028c565b60405180910390f35b610043610067366004610186565b61007b565b6000546001600160a01b031681565b600080546001600160a01b031633146100af5760405162461bcd60e51b81526004016100a69061033e565b60405180910390fd5b6000888888886040516100c19061015d565b6100ce94939291906102c4565b604051809103906000f0801580156100ea573d6000803e3d6000fd5b50604051636464abdb60e01b81529091506001600160a01b03821690636464abdb9061011e908890889088906004016102a0565b600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b50929b9a5050505050505050505050565b612b228061038c83390190565b80356001600160a01b038116811461018157600080fd5b919050565b600080600080600080600060e0888a0312156101a0578283fd5b6101a98861016a565b965060208089013567ffffffffffffffff808211156101c6578586fd5b818b0191508b601f8301126101d9578586fd5b8135818111156101eb576101eb610375565b604051601f8201601f191681018501838111828210171561020e5761020e610375565b60405281815283820185018e1015610224578788fd5b818585018683013787858383010152809a5050505050506102476040890161016a565b94506060880135935061025c6080890161016a565b925061026a60a0890161016a565b915060c0880135905092959891949750929550565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038616825260206080818401528551806080850152825b818110156103005787810183015185820160a0015282016102e4565b81811115610311578360a083870101525b50601f01601f1916830160a001915061032f9050604083018561027f565b82606083015295945050505050565b60208082526010908201527f556e6f2052653a466f7262696464656e00000000000000000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fdfe6080604052600019600e556001600f553480156200001c57600080fd5b5060405162002b2238038062002b228339810160408190526200003f9162000168565b600380546001600160a01b0319166001600160a01b03861617905582516200006f906004906020860190620000a5565b50600755600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905550620002bb9050565b828054620000b39062000268565b90600052602060002090601f016020900481019282620000d7576000855562000122565b82601f10620000f257805160ff191683800117855562000122565b8280016001018555821562000122579182015b828111156200012257825182559160200191906001019062000105565b506200013092915062000134565b5090565b5b8082111562000130576000815560010162000135565b80516001600160a01b03811681146200016357600080fd5b919050565b600080600080608085870312156200017e578384fd5b62000189856200014b565b602086810151919550906001600160401b0380821115620001a8578586fd5b818801915088601f830112620001bc578586fd5b815181811115620001d157620001d1620002a5565b604051601f8201601f1916810185018381118282101715620001f757620001f7620002a5565b60405281815283820185018b10156200020e578788fd5b8792505b8183101562000231578383018501518184018601529184019162000212565b818311156200024257878583830101525b809750505050505062000258604086016200014b565b6060959095015193969295505050565b6002810460018216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61285780620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101625760003560e01c80636464abdb116100c8578063c3dcfcf11161008c578063d2c7c2a411610066578063d2c7c2a4146102a1578063eea3dd47146102c7578063f6be71d1146102da57610162565b8063c3dcfcf11461027e578063c45a015514610291578063c6e899151461029957610162565b80636464abdb1461024057806375b2dd69146102535780638da5cb5b14610266578063ac1029f81461026e578063b381ff821461027657610162565b806334db39901161012a57806355cc7b381161010457806355cc7b38146102075780635fbfdf7d1461021a57806363186b201461022d57610162565b806334db3990146101ca5780633f62327d146101ea5780634ba69faa146101ff57610162565b806306fdde03146101675780630a3ecc6e146101855780630fb5a6b4146101a55780631083b856146101ba578063128c7001146101c2575b600080fd5b61016f6102ed565b60405161017c919061240c565b60405180910390f35b610198610193366004612032565b61037b565b60405161017c91906123a9565b6101ad610821565b60405161017c91906126ae565b6101ad610827565b6101ad61082d565b6101dd6101d8366004612275565b610833565b60405161017c9190612333565b6101fd6101f836600461221c565b61084e565b005b6101dd610948565b6101fd61021536600461228f565b610957565b6101fd610228366004611ff2565b610a53565b6101fd61023b36600461208f565b610d91565b6101fd61024e366004611ff2565b611042565b6101fd6102613660046121ff565b611111565b6101dd6111a6565b6101ad6111b5565b6101ad6111bb565b6101dd61028c366004612141565b6111c1565b6101dd6113d0565b6101dd6113df565b6102b46102af3660046121e5565b6113ee565b60405161017c979695949392919061241f565b6101fd6102d5366004611fba565b6115d8565b6101fd6102e8366004612245565b6119c3565b600480546102fa906127a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610326906127a0565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b6000600f546001146103a85760405162461bcd60e51b815260040161039f906125c6565b60405180910390fd5b6000600f556001546001600160a01b031633146103d75760405162461bcd60e51b815260040161039f9061258f565b6005546006546103e79042612759565b111580156103f6575060065415155b6104125760405162461bcd60e51b815260040161039f9061258f565b60008061041f85856119f2565b90925090506001821515146104465760405162461bcd60e51b815260040161039f9061262f565b60025460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d90610477908990600401612666565b60206040518083038186803b15801561048f57600080fd5b505afa1580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c7919061225d565b9050806104d483876126dd565b1161058e576002546040516323c4859f60e21b81526001600160a01b0390911690638f12167c9061050d908a908a908a9060040161236b565b600060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b50505050866001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a878760405161057a92919061269a565b60405180910390a260019350505050610815565b818111156106195760006105a28383612759565b6002546040516323c4859f60e21b81529192506001600160a01b031690638f12167c906105d7908b908b90869060040161236b565b600060405180830381600087803b1580156105f157600080fd5b505af1158015610605573d6000803e3d6000fd5b5050505080866106159190612759565b9550505b60005b600b548110156107c95785610630576107c9565b6000600a6000600b848154811061065757634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff168352828101939093526040918201812054825163e5a6b10f60e01b815292516001600160a01b0390911694509092849263e5a6b10f9260048083019392829003018186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190611f97565b90506000816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040161072e9190612333565b60206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e919061225d565b905080891161079b576107928b8a85611c58565b600098506107b3565b6107a68b8285611c58565b6107b0818a612759565b98505b50505080806107c1906127db565b91505061061c565b50866001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a878760405161080592919061269a565b60405180910390a2600193505050505b6001600f559392505050565b60055481565b600b5490565b60065481565b600a602052600090815260409020546001600160a01b031681565b6002546040805163e5a6b10f60e01b815290516108e0926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611f97565b60025433906001600160a01b031684611c86565b600254604051633f62327d60e01b81526001600160a01b0390911690633f62327d90610912908590859060040161269a565b600060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b505050505050565b6002546001600160a01b031681565b6000600a6000600b8560ff168154811061098157634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528301939093526040909101812054600b80546001600160a01b039092169450600a9390919086169081106109e557634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528381019490945260409283018220549681168252600a90935281812080546001600160a01b03199081166001600160a01b039889161790915594909216825290208054919093169116179055565b60065415610a735760405162461bcd60e51b815260040161039f90612558565b600e546001600160a01b0383166000908152600c60205260409020541480610ab257506001600160a01b0382166000908152600c602052604090205415155b610ace5760405162461bcd60e51b815260040161039f9061248d565b6000826001600160a01b0316632565b1596040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b41919061225d565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb6919061225d565b9050610bc281846126dd565b821015610be15760405162461bcd60e51b815260040161039f90612521565b6000846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1c57600080fd5b505afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611f97565b9050610c6281878787611c86565b604051637e348b7d60e01b81526001600160a01b03861690637e348b7d90610c909089908890600401612390565b600060405180830381600087803b158015610caa57600080fd5b505af1158015610cbe573d6000803e3d6000fd5b5050600e546001600160a01b0388166000908152600c6020526040902054149150610d189050576001600160a01b0385166000908152600c602052604081208054869290610d0d9084906126dd565b925050819055610d35565b6001600160a01b0385166000908152600c60205260409020849055835b50610d3e611d83565b846001600160a01b0316866001600160a01b03167fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f86604051610d8191906126ae565b60405180910390a3505050505050565b6003546001600160a01b03163314610dbb5760405162461bcd60e51b815260040161039f9061258f565b600954600090610dcc576000610e2a565b60098054610ddc90600190612759565b81548110610dfa57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166001610e2a91906126b7565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f90921660020261010090810a61ffff8181021990941693851602929092179055604080516020601f8d01819004028101830190915260e081018b81529293509182918c908c90819085018382808284376000920191909152505050908252506001600160a01b03891660208083019190915260408051601f8a018390048302810183018252898152920191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250505060208083018690526103e8604080850191909152600160609094019390935261ffff8516825260088152919020825180519192610f8992849290910190611e8f565b506020828101516001830180546001600160a01b0319166001600160a01b0390921691909117905560408301518051610fc89260028501920190611e8f565b5060608201518051610fe4916003840191602090910190611e8f565b506080820151600482015560a08201516005918201805460c0909401511515620100000262ff00001961ffff90931661ffff19909516949094179190911692909217909155548211156110375760058290555b505050505050505050565b6000546001600160a01b0316331461106c5760405162461bcd60e51b815260040161039f9061258f565b604051635800f04d60e11b81526001600160a01b0384169063b001e09a9061109a9085908590600401612390565b602060405180830381600087803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190611f97565b600280546001600160a01b0319166001600160a01b0392909216919091179055505050565b6003546001600160a01b0316331461113b5760405162461bcd60e51b815260040161039f9061258f565b600254604051633b75a53d60e11b81526001600160a01b03909116906376eb4a7a9061116f90869086908690600401612675565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b50505050505050565b6003546001600160a01b031681565b60075481565b60095490565b6003546000906001600160a01b031633146111ee5760405162461bcd60e51b815260040161039f9061258f565b600b54604051634f35e6d560e01b81526001600160a01b03871690634f35e6d59061122b908d908d908d908d9030908d908d908d906004016123b4565b602060405180830381600087803b15801561124557600080fd5b505af1158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190611f97565b9150600080821161128f5760006112e6565b600b61129c600184612759565b815481106112ba57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016112e691906126f5565b600b80546001810190915560208082047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805460ff808616601f9095166101000a8581029102199091161790556000918252600a90526040812080546001600160a01b0387166001600160a01b0319909116179055600d805492935087929091906113739084906126dd565b9091555050600e546001600160a01b0384166000818152600c6020526040808220939093559151909130917f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd583802179190a3505098975050505050505050565b6000546001600160a01b031681565b6001546001600160a01b031681565b600860205260009081526040902080548190611409906127a0565b80601f0160208091040260200160405190810160405280929190818152602001828054611435906127a0565b80156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050600184015460028501805494956001600160a01b039092169491935091506114ac906127a0565b80601f01602080910402602001604051908101604052809291908181526020018280546114d8906127a0565b80156115255780601f106114fa57610100808354040283529160200191611525565b820191906000526020600020905b81548152906001019060200180831161150857829003601f168201915b50505050509080600301805461153a906127a0565b80601f0160208091040260200160405190810160405280929190818152602001828054611566906127a0565b80156115b35780601f10611588576101008083540402835291602001916115b3565b820191906000526020600020905b81548152906001019060200180831161159657829003601f168201915b50505050600483015460059093015491929161ffff8116915062010000900460ff1687565b600f546001146115fa5760405162461bcd60e51b815260040161039f906125c6565b6000600f556006541580159061161d575060055460065461161b9042612759565b115b6116395760405162461bcd60e51b815260040161039f9061258f565b6001600160a01b0381166000908152600c60205260409020541580159061167a5750600e546001600160a01b0382166000908152600c602052604090205414155b6116965760405162461bcd60e51b815260040161039f906125ed565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906116c5908690600401612333565b60206040518083038186803b1580156116dd57600080fd5b505afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611715919061225d565b905060005b6009548110156119225760006009828154811061174757634e487b7160e01b600052603260045260246000fd5b600091825260208220601082040154600280546040516306c91eaf60e41b8152600f9094169091026101000a90910461ffff1693506001600160a01b031690636c91eaf09061179a908590600401612666565b602060405180830381600087803b1580156117b457600080fd5b505af11580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec919061225d565b90506000600d54866001600160a01b031663bd30558e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182c57600080fd5b505afa158015611840573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611864919061225d565b6001600160a01b0388166000908152600c6020526040902054611887888661273a565b611891919061271a565b61189b919061273a565b6118a5919061271a565b6002546040516323c4859f60e21b81529192506001600160a01b031690638f12167c906118da908a908790869060040161236b565b600060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b50505050505050808061191a906127db565b91505061171a565b50604051635f6fbbd360e11b81526001600160a01b0383169063bedf77a69061194f908690600401612333565b600060405180830381600087803b15801561196957600080fd5b505af115801561197d573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f3fdbe9ffcd54f2ab6b430c78a338bde8aefdc06f4720928defb03e50e9da853290600090a350506001600f5550565b6003546001600160a01b031633146119ed5760405162461bcd60e51b815260040161039f9061258f565b600555565b60025460405163cfbff97d60e01b8152600091829182916001600160a01b03169063cfbff97d90611a27908890600401612666565b60206040518083038186803b158015611a3f57600080fd5b505afa158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a77919061225d565b600b54909150600160005b82811015611ba7576000600a6000600b8481548110611ab157634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820181205482516318160ddd60e01b815292516001600160a01b039091169450909284926318160ddd9260048083019392829003018186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b58919061225d565b9050611b6481876126dd565b9550838015611b7257508015155b8015611b885750611b84600186612759565b8314155b15611b9257600093505b50508080611b9f906127db565b915050611a82565b5080611c3a57600260009054906101000a90046001600160a01b03166001600160a01b031663087d8d016040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611bfd57600080fd5b505af1158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c35919061225d565b611c3d565b60005b9350611c4984876126dd565b83101594505050509250929050565b6040516301e51e9760e01b81526001600160a01b038216906301e51e979061116f9086908690600401612390565b600080856001600160a01b03166323b872dd868686604051602401611cad93929190612347565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611cfb9190612317565b6000604051808303816000865af19150503d8060008114611d38576040519150601f19603f3d011682016040523d82523d6000602084013e611d3d565b606091505b5091509150818015611d67575080511580611d67575080806020019051810190611d67919061206f565b6109405760405162461bcd60e51b815260040161039f906124c4565b6000805b600b54811015611e7d576000600a6000600b8481548110611db857634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b158015611e2557600080fd5b505afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d919061225d565b611e6790846126dd565b9250508080611e75906127db565b915050611d87565b506007548110611e8c57426006555b50565b828054611e9b906127a0565b90600052602060002090601f016020900481019282611ebd5760008555611f03565b82601f10611ed657805160ff1916838001178555611f03565b82800160010185558215611f03579182015b82811115611f03578251825591602001919060010190611ee8565b50611f0f929150611f13565b5090565b5b80821115611f0f5760008155600101611f14565b60008083601f840112611f39578182fd5b50813567ffffffffffffffff811115611f50578182fd5b602083019150836020828501011115611f6857600080fd5b9250929050565b803561ffff81168114611f8157600080fd5b919050565b803560ff81168114611f8157600080fd5b600060208284031215611fa8578081fd5b8151611fb38161280c565b9392505050565b60008060408385031215611fcc578081fd5b8235611fd78161280c565b91506020830135611fe78161280c565b809150509250929050565b600080600060608486031215612006578081fd5b83356120118161280c565b925060208401356120218161280c565b929592945050506040919091013590565b600080600060608486031215612046578283fd5b83356120518161280c565b925061205f60208501611f6f565b9150604084013590509250925092565b600060208284031215612080578081fd5b81518015158114611fb3578182fd5b60008060008060008060008060a0898b0312156120aa578384fd5b883567ffffffffffffffff808211156120c1578586fd5b6120cd8c838d01611f28565b909a50985060208b013591506120e28261280c565b90965060408a013590808211156120f7578586fd5b6121038c838d01611f28565b909750955060608b013591508082111561211b578485fd5b506121288b828c01611f28565b999c989b50969995989497949560800135949350505050565b60008060008060008060008060c0898b03121561215c578384fd5b883567ffffffffffffffff80821115612173578586fd5b61217f8c838d01611f28565b909a50985060208b0135915080821115612197578586fd5b506121a48b828c01611f28565b90975095505060408901356121b88161280c565b935060608901356121c88161280c565b979a969950949793969295929450505060808201359160a0013590565b6000602082840312156121f6578081fd5b611fb382611f6f565b600080600060608486031215612213578283fd5b61201184611f6f565b6000806040838503121561222e578182fd5b61223783611f6f565b946020939093013593505050565b600060208284031215612256578081fd5b5035919050565b60006020828403121561226e578081fd5b5051919050565b600060208284031215612286578081fd5b611fb382611f86565b600080604083850312156122a1578182fd5b6122aa83611f86565b91506122b860208401611f86565b90509250929050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612303816020860160208601612770565b601f01601f19169290920160200192915050565b60008251612329818460208701612770565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835261ffff919091166020830152604082015260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060c082526123c860c083018a8c6122c1565b82810360208401526123db81898b6122c1565b6001600160a01b03978816604085015295909616606083015250608081019290925260a09091015295945050505050565b600060208252611fb360208301846122eb565b600060e0825261243260e083018a6122eb565b6001600160a01b0389166020840152828103604084015261245381896122eb565b9050828103606084015261246781886122eb565b6080840196909652505061ffff9290921660a0830152151560c090910152949350505050565b60208082526019908201527f556e6f52653a205269736b506f6f6c206e6f7420657869737400000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a205269736b506f6f6c206f766572666c6f770000000000000000604082015260600190565b60208082526018908201527f556e6f52653a205374616b696e672077617320456e6465640000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252600d908201526c155b9bd4994e881313d0d2d151609a1b604082015260600190565b60208082526022908201527f556e6f52653a205269736b506f6f6c206e6f74206578697374206f7220656d70604082015261747960f01b606082015260800190565b6020808252601c908201527f556e6f52653a204361706974616c206973206e6f7420656e6f75676800000000604082015260600190565b61ffff91909116815260200190565b61ffff9390931683526001600160a01b03919091166020830152604082015260600190565b61ffff929092168252602082015260400190565b90815260200190565b600061ffff8083168185168083038211156126d4576126d46127f6565b01949350505050565b600082198211156126f0576126f06127f6565b500190565b600060ff821660ff84168060ff03821115612712576127126127f6565b019392505050565b60008261273557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612754576127546127f6565b500290565b60008282101561276b5761276b6127f6565b500390565b60005b8381101561278b578181015183820152602001612773565b8381111561279a576000848401525b50505050565b6002810460018216806127b457607f821691505b602082108114156127d557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156127ef576127ef6127f6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611e8c57600080fdfea26469706673582212208d46ed3dfab2d447be4a0a67669835197159b6161196bed7454412084f762feb64736f6c63430008000033a264697066735822122095cad57d8d2c79b59b7493f261aa6ed8dedde793badd9491103ef482eced2e1c64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637a95129b1461003b578063ba332fa414610059575b600080fd5b61004361006c565b604051610050919061028c565b60405180910390f35b610043610067366004610186565b61007b565b6000546001600160a01b031681565b600080546001600160a01b031633146100af5760405162461bcd60e51b81526004016100a69061033e565b60405180910390fd5b6000888888886040516100c19061015d565b6100ce94939291906102c4565b604051809103906000f0801580156100ea573d6000803e3d6000fd5b50604051636464abdb60e01b81529091506001600160a01b03821690636464abdb9061011e908890889088906004016102a0565b600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b50929b9a5050505050505050505050565b612b228061038c83390190565b80356001600160a01b038116811461018157600080fd5b919050565b600080600080600080600060e0888a0312156101a0578283fd5b6101a98861016a565b965060208089013567ffffffffffffffff808211156101c6578586fd5b818b0191508b601f8301126101d9578586fd5b8135818111156101eb576101eb610375565b604051601f8201601f191681018501838111828210171561020e5761020e610375565b60405281815283820185018e1015610224578788fd5b818585018683013787858383010152809a5050505050506102476040890161016a565b94506060880135935061025c6080890161016a565b925061026a60a0890161016a565b915060c0880135905092959891949750929550565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038616825260206080818401528551806080850152825b818110156103005787810183015185820160a0015282016102e4565b81811115610311578360a083870101525b50601f01601f1916830160a001915061032f9050604083018561027f565b82606083015295945050505050565b60208082526010908201527f556e6f2052653a466f7262696464656e00000000000000000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fdfe6080604052600019600e556001600f553480156200001c57600080fd5b5060405162002b2238038062002b228339810160408190526200003f9162000168565b600380546001600160a01b0319166001600160a01b03861617905582516200006f906004906020860190620000a5565b50600755600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905550620002bb9050565b828054620000b39062000268565b90600052602060002090601f016020900481019282620000d7576000855562000122565b82601f10620000f257805160ff191683800117855562000122565b8280016001018555821562000122579182015b828111156200012257825182559160200191906001019062000105565b506200013092915062000134565b5090565b5b8082111562000130576000815560010162000135565b80516001600160a01b03811681146200016357600080fd5b919050565b600080600080608085870312156200017e578384fd5b62000189856200014b565b602086810151919550906001600160401b0380821115620001a8578586fd5b818801915088601f830112620001bc578586fd5b815181811115620001d157620001d1620002a5565b604051601f8201601f1916810185018381118282101715620001f757620001f7620002a5565b60405281815283820185018b10156200020e578788fd5b8792505b8183101562000231578383018501518184018601529184019162000212565b818311156200024257878583830101525b809750505050505062000258604086016200014b565b6060959095015193969295505050565b6002810460018216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61285780620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101625760003560e01c80636464abdb116100c8578063c3dcfcf11161008c578063d2c7c2a411610066578063d2c7c2a4146102a1578063eea3dd47146102c7578063f6be71d1146102da57610162565b8063c3dcfcf11461027e578063c45a015514610291578063c6e899151461029957610162565b80636464abdb1461024057806375b2dd69146102535780638da5cb5b14610266578063ac1029f81461026e578063b381ff821461027657610162565b806334db39901161012a57806355cc7b381161010457806355cc7b38146102075780635fbfdf7d1461021a57806363186b201461022d57610162565b806334db3990146101ca5780633f62327d146101ea5780634ba69faa146101ff57610162565b806306fdde03146101675780630a3ecc6e146101855780630fb5a6b4146101a55780631083b856146101ba578063128c7001146101c2575b600080fd5b61016f6102ed565b60405161017c919061240c565b60405180910390f35b610198610193366004612032565b61037b565b60405161017c91906123a9565b6101ad610821565b60405161017c91906126ae565b6101ad610827565b6101ad61082d565b6101dd6101d8366004612275565b610833565b60405161017c9190612333565b6101fd6101f836600461221c565b61084e565b005b6101dd610948565b6101fd61021536600461228f565b610957565b6101fd610228366004611ff2565b610a53565b6101fd61023b36600461208f565b610d91565b6101fd61024e366004611ff2565b611042565b6101fd6102613660046121ff565b611111565b6101dd6111a6565b6101ad6111b5565b6101ad6111bb565b6101dd61028c366004612141565b6111c1565b6101dd6113d0565b6101dd6113df565b6102b46102af3660046121e5565b6113ee565b60405161017c979695949392919061241f565b6101fd6102d5366004611fba565b6115d8565b6101fd6102e8366004612245565b6119c3565b600480546102fa906127a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610326906127a0565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b6000600f546001146103a85760405162461bcd60e51b815260040161039f906125c6565b60405180910390fd5b6000600f556001546001600160a01b031633146103d75760405162461bcd60e51b815260040161039f9061258f565b6005546006546103e79042612759565b111580156103f6575060065415155b6104125760405162461bcd60e51b815260040161039f9061258f565b60008061041f85856119f2565b90925090506001821515146104465760405162461bcd60e51b815260040161039f9061262f565b60025460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d90610477908990600401612666565b60206040518083038186803b15801561048f57600080fd5b505afa1580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c7919061225d565b9050806104d483876126dd565b1161058e576002546040516323c4859f60e21b81526001600160a01b0390911690638f12167c9061050d908a908a908a9060040161236b565b600060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b50505050866001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a878760405161057a92919061269a565b60405180910390a260019350505050610815565b818111156106195760006105a28383612759565b6002546040516323c4859f60e21b81529192506001600160a01b031690638f12167c906105d7908b908b90869060040161236b565b600060405180830381600087803b1580156105f157600080fd5b505af1158015610605573d6000803e3d6000fd5b5050505080866106159190612759565b9550505b60005b600b548110156107c95785610630576107c9565b6000600a6000600b848154811061065757634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff168352828101939093526040918201812054825163e5a6b10f60e01b815292516001600160a01b0390911694509092849263e5a6b10f9260048083019392829003018186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe9190611f97565b90506000816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040161072e9190612333565b60206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e919061225d565b905080891161079b576107928b8a85611c58565b600098506107b3565b6107a68b8285611c58565b6107b0818a612759565b98505b50505080806107c1906127db565b91505061061c565b50866001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a878760405161080592919061269a565b60405180910390a2600193505050505b6001600f559392505050565b60055481565b600b5490565b60065481565b600a602052600090815260409020546001600160a01b031681565b6002546040805163e5a6b10f60e01b815290516108e0926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611f97565b60025433906001600160a01b031684611c86565b600254604051633f62327d60e01b81526001600160a01b0390911690633f62327d90610912908590859060040161269a565b600060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b505050505050565b6002546001600160a01b031681565b6000600a6000600b8560ff168154811061098157634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528301939093526040909101812054600b80546001600160a01b039092169450600a9390919086169081106109e557634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528381019490945260409283018220549681168252600a90935281812080546001600160a01b03199081166001600160a01b039889161790915594909216825290208054919093169116179055565b60065415610a735760405162461bcd60e51b815260040161039f90612558565b600e546001600160a01b0383166000908152600c60205260409020541480610ab257506001600160a01b0382166000908152600c602052604090205415155b610ace5760405162461bcd60e51b815260040161039f9061248d565b6000826001600160a01b0316632565b1596040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b41919061225d565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb6919061225d565b9050610bc281846126dd565b821015610be15760405162461bcd60e51b815260040161039f90612521565b6000846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1c57600080fd5b505afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611f97565b9050610c6281878787611c86565b604051637e348b7d60e01b81526001600160a01b03861690637e348b7d90610c909089908890600401612390565b600060405180830381600087803b158015610caa57600080fd5b505af1158015610cbe573d6000803e3d6000fd5b5050600e546001600160a01b0388166000908152600c6020526040902054149150610d189050576001600160a01b0385166000908152600c602052604081208054869290610d0d9084906126dd565b925050819055610d35565b6001600160a01b0385166000908152600c60205260409020849055835b50610d3e611d83565b846001600160a01b0316866001600160a01b03167fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f86604051610d8191906126ae565b60405180910390a3505050505050565b6003546001600160a01b03163314610dbb5760405162461bcd60e51b815260040161039f9061258f565b600954600090610dcc576000610e2a565b60098054610ddc90600190612759565b81548110610dfa57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166001610e2a91906126b7565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f90921660020261010090810a61ffff8181021990941693851602929092179055604080516020601f8d01819004028101830190915260e081018b81529293509182918c908c90819085018382808284376000920191909152505050908252506001600160a01b03891660208083019190915260408051601f8a018390048302810183018252898152920191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250505060208083018690526103e8604080850191909152600160609094019390935261ffff8516825260088152919020825180519192610f8992849290910190611e8f565b506020828101516001830180546001600160a01b0319166001600160a01b0390921691909117905560408301518051610fc89260028501920190611e8f565b5060608201518051610fe4916003840191602090910190611e8f565b506080820151600482015560a08201516005918201805460c0909401511515620100000262ff00001961ffff90931661ffff19909516949094179190911692909217909155548211156110375760058290555b505050505050505050565b6000546001600160a01b0316331461106c5760405162461bcd60e51b815260040161039f9061258f565b604051635800f04d60e11b81526001600160a01b0384169063b001e09a9061109a9085908590600401612390565b602060405180830381600087803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190611f97565b600280546001600160a01b0319166001600160a01b0392909216919091179055505050565b6003546001600160a01b0316331461113b5760405162461bcd60e51b815260040161039f9061258f565b600254604051633b75a53d60e11b81526001600160a01b03909116906376eb4a7a9061116f90869086908690600401612675565b600060405180830381600087803b15801561118957600080fd5b505af115801561119d573d6000803e3d6000fd5b50505050505050565b6003546001600160a01b031681565b60075481565b60095490565b6003546000906001600160a01b031633146111ee5760405162461bcd60e51b815260040161039f9061258f565b600b54604051634f35e6d560e01b81526001600160a01b03871690634f35e6d59061122b908d908d908d908d9030908d908d908d906004016123b4565b602060405180830381600087803b15801561124557600080fd5b505af1158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190611f97565b9150600080821161128f5760006112e6565b600b61129c600184612759565b815481106112ba57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016112e691906126f5565b600b80546001810190915560208082047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805460ff808616601f9095166101000a8581029102199091161790556000918252600a90526040812080546001600160a01b0387166001600160a01b0319909116179055600d805492935087929091906113739084906126dd565b9091555050600e546001600160a01b0384166000818152600c6020526040808220939093559151909130917f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd583802179190a3505098975050505050505050565b6000546001600160a01b031681565b6001546001600160a01b031681565b600860205260009081526040902080548190611409906127a0565b80601f0160208091040260200160405190810160405280929190818152602001828054611435906127a0565b80156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050600184015460028501805494956001600160a01b039092169491935091506114ac906127a0565b80601f01602080910402602001604051908101604052809291908181526020018280546114d8906127a0565b80156115255780601f106114fa57610100808354040283529160200191611525565b820191906000526020600020905b81548152906001019060200180831161150857829003601f168201915b50505050509080600301805461153a906127a0565b80601f0160208091040260200160405190810160405280929190818152602001828054611566906127a0565b80156115b35780601f10611588576101008083540402835291602001916115b3565b820191906000526020600020905b81548152906001019060200180831161159657829003601f168201915b50505050600483015460059093015491929161ffff8116915062010000900460ff1687565b600f546001146115fa5760405162461bcd60e51b815260040161039f906125c6565b6000600f556006541580159061161d575060055460065461161b9042612759565b115b6116395760405162461bcd60e51b815260040161039f9061258f565b6001600160a01b0381166000908152600c60205260409020541580159061167a5750600e546001600160a01b0382166000908152600c602052604090205414155b6116965760405162461bcd60e51b815260040161039f906125ed565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906116c5908690600401612333565b60206040518083038186803b1580156116dd57600080fd5b505afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611715919061225d565b905060005b6009548110156119225760006009828154811061174757634e487b7160e01b600052603260045260246000fd5b600091825260208220601082040154600280546040516306c91eaf60e41b8152600f9094169091026101000a90910461ffff1693506001600160a01b031690636c91eaf09061179a908590600401612666565b602060405180830381600087803b1580156117b457600080fd5b505af11580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec919061225d565b90506000600d54866001600160a01b031663bd30558e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182c57600080fd5b505afa158015611840573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611864919061225d565b6001600160a01b0388166000908152600c6020526040902054611887888661273a565b611891919061271a565b61189b919061273a565b6118a5919061271a565b6002546040516323c4859f60e21b81529192506001600160a01b031690638f12167c906118da908a908790869060040161236b565b600060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b50505050505050808061191a906127db565b91505061171a565b50604051635f6fbbd360e11b81526001600160a01b0383169063bedf77a69061194f908690600401612333565b600060405180830381600087803b15801561196957600080fd5b505af115801561197d573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f3fdbe9ffcd54f2ab6b430c78a338bde8aefdc06f4720928defb03e50e9da853290600090a350506001600f5550565b6003546001600160a01b031633146119ed5760405162461bcd60e51b815260040161039f9061258f565b600555565b60025460405163cfbff97d60e01b8152600091829182916001600160a01b03169063cfbff97d90611a27908890600401612666565b60206040518083038186803b158015611a3f57600080fd5b505afa158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a77919061225d565b600b54909150600160005b82811015611ba7576000600a6000600b8481548110611ab157634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820181205482516318160ddd60e01b815292516001600160a01b039091169450909284926318160ddd9260048083019392829003018186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b58919061225d565b9050611b6481876126dd565b9550838015611b7257508015155b8015611b885750611b84600186612759565b8314155b15611b9257600093505b50508080611b9f906127db565b915050611a82565b5080611c3a57600260009054906101000a90046001600160a01b03166001600160a01b031663087d8d016040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611bfd57600080fd5b505af1158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c35919061225d565b611c3d565b60005b9350611c4984876126dd565b83101594505050509250929050565b6040516301e51e9760e01b81526001600160a01b038216906301e51e979061116f9086908690600401612390565b600080856001600160a01b03166323b872dd868686604051602401611cad93929190612347565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611cfb9190612317565b6000604051808303816000865af19150503d8060008114611d38576040519150601f19603f3d011682016040523d82523d6000602084013e611d3d565b606091505b5091509150818015611d67575080511580611d67575080806020019051810190611d67919061206f565b6109405760405162461bcd60e51b815260040161039f906124c4565b6000805b600b54811015611e7d576000600a6000600b8481548110611db857634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b158015611e2557600080fd5b505afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d919061225d565b611e6790846126dd565b9250508080611e75906127db565b915050611d87565b506007548110611e8c57426006555b50565b828054611e9b906127a0565b90600052602060002090601f016020900481019282611ebd5760008555611f03565b82601f10611ed657805160ff1916838001178555611f03565b82800160010185558215611f03579182015b82811115611f03578251825591602001919060010190611ee8565b50611f0f929150611f13565b5090565b5b80821115611f0f5760008155600101611f14565b60008083601f840112611f39578182fd5b50813567ffffffffffffffff811115611f50578182fd5b602083019150836020828501011115611f6857600080fd5b9250929050565b803561ffff81168114611f8157600080fd5b919050565b803560ff81168114611f8157600080fd5b600060208284031215611fa8578081fd5b8151611fb38161280c565b9392505050565b60008060408385031215611fcc578081fd5b8235611fd78161280c565b91506020830135611fe78161280c565b809150509250929050565b600080600060608486031215612006578081fd5b83356120118161280c565b925060208401356120218161280c565b929592945050506040919091013590565b600080600060608486031215612046578283fd5b83356120518161280c565b925061205f60208501611f6f565b9150604084013590509250925092565b600060208284031215612080578081fd5b81518015158114611fb3578182fd5b60008060008060008060008060a0898b0312156120aa578384fd5b883567ffffffffffffffff808211156120c1578586fd5b6120cd8c838d01611f28565b909a50985060208b013591506120e28261280c565b90965060408a013590808211156120f7578586fd5b6121038c838d01611f28565b909750955060608b013591508082111561211b578485fd5b506121288b828c01611f28565b999c989b50969995989497949560800135949350505050565b60008060008060008060008060c0898b03121561215c578384fd5b883567ffffffffffffffff80821115612173578586fd5b61217f8c838d01611f28565b909a50985060208b0135915080821115612197578586fd5b506121a48b828c01611f28565b90975095505060408901356121b88161280c565b935060608901356121c88161280c565b979a969950949793969295929450505060808201359160a0013590565b6000602082840312156121f6578081fd5b611fb382611f6f565b600080600060608486031215612213578283fd5b61201184611f6f565b6000806040838503121561222e578182fd5b61223783611f6f565b946020939093013593505050565b600060208284031215612256578081fd5b5035919050565b60006020828403121561226e578081fd5b5051919050565b600060208284031215612286578081fd5b611fb382611f86565b600080604083850312156122a1578182fd5b6122aa83611f86565b91506122b860208401611f86565b90509250929050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612303816020860160208601612770565b601f01601f19169290920160200192915050565b60008251612329818460208701612770565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835261ffff919091166020830152604082015260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060c082526123c860c083018a8c6122c1565b82810360208401526123db81898b6122c1565b6001600160a01b03978816604085015295909616606083015250608081019290925260a09091015295945050505050565b600060208252611fb360208301846122eb565b600060e0825261243260e083018a6122eb565b6001600160a01b0389166020840152828103604084015261245381896122eb565b9050828103606084015261246781886122eb565b6080840196909652505061ffff9290921660a0830152151560c090910152949350505050565b60208082526019908201527f556e6f52653a205269736b506f6f6c206e6f7420657869737400000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a205269736b506f6f6c206f766572666c6f770000000000000000604082015260600190565b60208082526018908201527f556e6f52653a205374616b696e672077617320456e6465640000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b6020808252600d908201526c155b9bd4994e881313d0d2d151609a1b604082015260600190565b60208082526022908201527f556e6f52653a205269736b506f6f6c206e6f74206578697374206f7220656d70604082015261747960f01b606082015260800190565b6020808252601c908201527f556e6f52653a204361706974616c206973206e6f7420656e6f75676800000000604082015260600190565b61ffff91909116815260200190565b61ffff9390931683526001600160a01b03919091166020830152604082015260600190565b61ffff929092168252602082015260400190565b90815260200190565b600061ffff8083168185168083038211156126d4576126d46127f6565b01949350505050565b600082198211156126f0576126f06127f6565b500190565b600060ff821660ff84168060ff03821115612712576127126127f6565b019392505050565b60008261273557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612754576127546127f6565b500290565b60008282101561276b5761276b6127f6565b500390565b60005b8381101561278b578181015183820152602001612773565b8381111561279a576000848401525b50505050565b6002810460018216806127b457607f821691505b602082108114156127d557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156127ef576127ef6127f6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611e8c57600080fdfea26469706673582212208d46ed3dfab2d447be4a0a67669835197159b6161196bed7454412084f762feb64736f6c63430008000033a264697066735822122095cad57d8d2c79b59b7493f261aa6ed8dedde793badd9491103ef482eced2e1c64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2945,
        "contract": "contracts/factories/CohortFactory.sol:CohortFactory",
        "label": "actuary",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}