{
  "language": "Solidity",
  "sources": {
    "contracts/Actuary.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/ICohortFactory.sol\";\n\ncontract Actuary is Ownable {\n    address public claimAssessor;\n    address[] public cohortCreators;\n    uint256 public cohortCreateFee;\n\n    event CohortCreated(address indexed cohort, address indexed owner);\n\n    constructor(address _claimAssessor) {\n        require(_claimAssessor != address(0), \"UnoRe: ZERO_ADDRESS\");\n        claimAssessor = _claimAssessor;\n    }\n\n    modifier onlyCohortCreator() {\n        require(isCohortCreator(msg.sender), \"UnoRe: Forbidden\");\n        _;\n    }\n\n    function cohortCreatorsLength() external view returns (uint256) {\n        return cohortCreators.length;\n    }\n\n    function addCohortCreator(address _creator) external onlyOwner {\n        require(isCohortCreator(_creator) == false, \"UnoRe: Already registered\");\n        cohortCreators.push(_creator);\n    }\n\n    function createCohort(\n        address _cohortFactory,\n        string memory _name,\n        uint256 _cohortStartCapital,\n        address _premiumFactory,\n        address _premiumCurrency,\n        uint256 _minPremium\n    ) external payable onlyCohortCreator returns (address cohort) {\n        require(owner() == msg.sender || msg.value == cohortCreateFee, \"UnoRe: Incorrect creation fee\");\n        require(_premiumFactory != address(0), \"UnoRe: ZERO_ADDRESS\");\n        require(_premiumCurrency != address(0), \"UnoRe: ZERO_ADDRESS\");\n        cohort = ICohortFactory(_cohortFactory).newCohort(\n            msg.sender,\n            _name,\n            claimAssessor,\n            _cohortStartCapital,\n            _premiumFactory,\n            _premiumCurrency,\n            _minPremium\n        );\n\n        emit CohortCreated(cohort, msg.sender);\n    }\n\n    function isCohortCreator(address _creator) public view returns (bool) {\n        if (owner() == _creator) {\n            return true;\n        }\n        uint256 len = cohortCreators.length;\n        for (uint256 ii = 0; ii < len; ii++) {\n            if (cohortCreators[ii] == _creator) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev when setting fee, please consider ETH decimal(8)\n     */\n    function setCohortCreationFee(uint256 _fee) external onlyOwner {\n        cohortCreateFee = _fee;\n    }\n\n    function withdrawCreateFee(address _to) external onlyOwner {\n        TransferHelper.safeTransferETH(_to, address(this).balance);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.0;\n\n// from Uniswap TransferHelper library\nlibrary TransferHelper {\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/interfaces/ICohortFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ICohortFactory {\n    function newCohort(\n        address _owner,\n        string memory _name,\n        address _claimAssessor,\n        uint256 _cohortStartCapital,\n        address _premiumFactory,\n        address _premiumCurrency,\n        uint256 _minPremium\n    ) external returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/factories/CohortFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../Cohort.sol\";\nimport \"../interfaces/ICohortFactory.sol\";\n\ncontract CohortFactory is ICohortFactory {\n    address public actuary;\n\n    constructor(address _actuary) {\n        actuary = _actuary;\n    }\n\n    function newCohort(\n        address _owner,\n        string memory _name,\n        address _claimAssessor,\n        uint256 _cohortStartCapital,\n        address _premiumFactory,\n        address _premiumCurrency,\n        uint256 _minPremium\n    ) external override returns (address) {\n        require(msg.sender == actuary, \"Uno Re:Forbidden\");\n        Cohort _cohort = new Cohort(_owner, _name, _claimAssessor, _cohortStartCapital);\n\n        _cohort.createPremiumPool(_premiumFactory, _premiumCurrency, _minPremium);\n        return address(_cohort);\n    }\n}\n"
    },
    "contracts/Cohort.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IRiskPoolFactory.sol\";\nimport \"./interfaces/ICohort.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./interfaces/IPremiumPoolFactory.sol\";\nimport \"./interfaces/IPremiumPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract Cohort is ICohort, ReentrancyGuard {\n    // It should be okay if Protocol is struct\n    struct Protocol {\n        uint256 coverDuration; // Duration of the protocol cover products\n        address protocolAddress; // Address of that protocol\n        string name; // protocol name\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\n        string premiumDescription;\n        uint16 avgLR; // LR means Loss Ratio, default 1000 = 1\n        bool exist; // initial true\n    }\n\n    address public factory;\n    address public claimAssessor;\n    address public premiumPool;\n    address public owner;\n    string public name;\n    // uint public TVLc;\n    // uint public combinedRisk;\n    uint256 public duration;\n    // uint8 public status;\n    uint256 public cohortActiveFrom;\n\n    // for now we set this as constant\n    uint256 public immutable COHORT_START_CAPITAL;\n\n    mapping(uint16 => Protocol) public getProtocol;\n    uint16[] private allProtocols;\n\n    mapping(uint8 => address) public getRiskPool;\n    uint8[] private allRiskPools;\n\n    // pool => amount => pool capital\n    mapping(address => uint256) private poolCapital;\n    uint256 private totalAPRofPools;\n    uint256 private MAX_INTEGER = type(uint256).max;\n\n    event ProtocolCreated(address indexed _cohort, uint16 _protocolIdx);\n    event PremiumDeposited(address indexed _cohort, uint16 _protocolIdx, uint256 _amount);\n    event RiskPoolCreated(address indexed _cohort, address indexed _pool);\n    event StakedInPool(address indexed _staker, address indexed pool, uint256 _amount);\n    event LeftPool(address indexed _staker, address indexed _pool);\n    event ClaimPaid(address indexed _claimer, uint256 _protocolIdx, uint256 _amount);\n\n    constructor(\n        address _owner,\n        string memory _name,\n        address _claimAssessor,\n        uint256 _cohortStartCapital\n    ) {\n        owner = _owner;\n        name = _name;\n        COHORT_START_CAPITAL = _cohortStartCapital;\n        claimAssessor = _claimAssessor;\n        factory = msg.sender;\n    }\n\n    modifier onlyCohortOwner() {\n        require(msg.sender == owner, \"UnoRe: Forbidden\");\n        _;\n    }\n\n    function allProtocolsLength() external view returns (uint256) {\n        return allProtocols.length;\n    }\n\n    function allRiskPoolLength() external view returns (uint256) {\n        return allRiskPools.length;\n    }\n\n    /**\n     * @dev We separated createPremiumPool from constructor to keep light constructor\n     */\n    function createPremiumPool(\n        address _factory,\n        address _currency,\n        uint256 _minimum\n    ) external {\n        require(msg.sender == factory, \"UnoRe: Forbidden\");\n        premiumPool = IPremiumPoolFactory(_factory).newPremiumPool(_currency, _minimum);\n    }\n\n    // This action can be done only by cohort owner\n    function addProtocol(\n        string calldata _name,\n        address _protocolAddress,\n        string calldata _productType,\n        string calldata _premiumDescription,\n        uint256 _coverDuration\n    ) external onlyCohortOwner {\n        uint16 lastIdx = allProtocols.length > 0 ? allProtocols[allProtocols.length - 1] + 1 : 0;\n        allProtocols.push(lastIdx);\n        getProtocol[lastIdx] = Protocol({\n            coverDuration: _coverDuration,\n            protocolAddress: _protocolAddress,\n            name: _name,\n            productType: _productType,\n            premiumDescription: _premiumDescription,\n            avgLR: 1000, //\n            exist: true\n        });\n\n        if (duration < _coverDuration) {\n            duration = _coverDuration;\n        }\n        emit ProtocolCreated(address(this), lastIdx);\n    }\n\n    /**\n     * @dev create Risk pool from cohort owner\n     */\n    function createRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _factory,\n        address _currency,\n        uint256 _APR,\n        uint256 _maxSize\n    ) external onlyCohortOwner returns (address pool) {\n        uint256 len = allRiskPools.length;\n        pool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency, _APR, _maxSize);\n\n        uint8 lastIdx = len > 0 ? allRiskPools[len - 1] + 1 : 0;\n        allRiskPools.push(lastIdx);\n        getRiskPool[lastIdx] = pool;\n        totalAPRofPools += _APR;\n        poolCapital[pool] = MAX_INTEGER;\n        emit RiskPoolCreated(address(this), pool);\n    }\n\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external nonReentrant {\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        TransferHelper.safeTransferFrom(IPremiumPool(premiumPool).currency(), msg.sender, premiumPool, _amount);\n        IPremiumPool(premiumPool).depositPremium(_protocolIdx, _amount);\n        emit PremiumDeposited(address(this), _protocolIdx, _amount);\n    }\n\n    function enterInPool(\n        address _from,\n        address _pool,\n        uint256 _amount\n    ) external nonReentrant {\n        require(cohortActiveFrom == 0, \"UnoRe: Staking was Ended\");\n        require(poolCapital[_pool] == MAX_INTEGER || poolCapital[_pool] != 0, \"UnoRe: RiskPool not exist\");\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        uint256 _poolMaxSize = IRiskPool(_pool).maxSize();\n        uint256 _currentSupply = IERC20(_pool).totalSupply(); // It's Okay using totalSupply here, because there's no withdrawl during staking.\n        require(_poolMaxSize >= (_amount + _currentSupply), \"UnoRe: RiskPool overflow\");\n        address token = IRiskPool(_pool).currency();\n        TransferHelper.safeTransferFrom(token, _from, _pool, _amount);\n        IRiskPool(_pool).enter(_from, _amount);\n        poolCapital[_pool] == MAX_INTEGER ? poolCapital[_pool] = _amount : poolCapital[_pool] += _amount;\n        _startCohort();\n\n        emit StakedInPool(_from, _pool, _amount);\n    }\n\n    /**\n     * @dev for now we assume protocols send premium to cohort smart contract\n     */\n    function leaveFromPool(address _to, address _pool) external nonReentrant {\n        require(cohortActiveFrom != 0 && block.timestamp - cohortActiveFrom > duration, \"UnoRe: Forbidden\");\n        require(poolCapital[_pool] != 0 && poolCapital[_pool] != MAX_INTEGER, \"UnoRe: RiskPool not exist or empty\");\n        // Withdraw remaining from pool\n        uint256 amount = IERC20(_pool).balanceOf(_to);\n        require(amount != 0, \"UnoRe: ZERO Value\");\n        // get premium rewards\n        /**\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\n         */\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\n            uint16 protocolIdx = allProtocols[ii];\n            IPremiumPool(premiumPool).setPremiumReward(protocolIdx);\n            uint256 _pr = premiumReward(_to, _pool, protocolIdx);\n            IPremiumPool(premiumPool).withdrawPremium(_to, protocolIdx, _pr);\n        }\n\n        IRiskPool(_pool).leave(_to);\n        emit LeftPool(_to, _pool);\n    }\n\n    /**\n     * @dev This function shows the premium reward which user can get.\n     * It can be changed in staking and coverage duration, but should be fixed value after coverage.\n     */\n    function premiumReward(\n        address _account,\n        address _riskPool,\n        uint16 _protocolIdx\n    ) private view returns (uint256) {\n        if (poolCapital[_riskPool] == 0 || poolCapital[_riskPool] == MAX_INTEGER || totalAPRofPools == 0) {\n            return 0;\n        }\n        uint256 _totalPr = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\n        uint256 amount = IERC20(_riskPool).balanceOf(_account);\n        uint256 denominator = poolCapital[_riskPool] * totalAPRofPools;\n        uint256 numerator = _totalPr * amount * IRiskPool(_riskPool).APR();\n        return numerator / denominator;\n    }\n\n    /**\n     * @dev for now all premiums and risk pools are paid in stable coin\n     * @dev we can trust claim request from ClaimAssesor\n     */\n    function requestClaim(\n        address _from,\n        uint16 _protocolIdx,\n        uint256 _amount\n    ) external override nonReentrant {\n        require(msg.sender == claimAssessor, \"UnoRe: Forbidden\");\n        require(_amount != 0, \"UnoRe: ZERO Value\");\n        require(block.timestamp - cohortActiveFrom <= duration && cohortActiveFrom != 0, \"UnoRe: Forbidden\");\n        (bool hasEnough, uint256 minPremium) = hasEnoughCapital(_protocolIdx, _amount);\n        require(hasEnough == true, \"UnoRe: Capital is not enough\");\n\n        uint256 currentPremium = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\n        /** We should remain minimum amount in premium pool\n         * Uno Res reinsurance mechanism works in the following manner.\n         * There is a premium pool, into which all the premium collected from various protocols is held.\n         * At the end of the policy period, the premium is distributed to the 3 risk pools in accordance with the rewards distribution formula.\n         *\n         * The claims payout, is first done from the premium pool,\n         * after it's exhaustion the risk pool 1 is used then risk pool 2 and so on.\n         *\n         * There is a need of a minimum reserve premium to account for case scenarios\n         * where claims are incurred and premium pool and risk pool 1 is completely exhausted.\n         * The min premium reserve will be used to allocate rewards to all the pools (risk pool 1, risk pool 2, risk pool 3, etc.. )\n         */\n        if (_amount + minPremium <= currentPremium) {\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _amount);\n            emit ClaimPaid(_from, _protocolIdx, _amount);\n            return;\n        }\n        if (currentPremium > minPremium) {\n            // Tranfer from premium\n            uint256 _paid = currentPremium - minPremium;\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _paid);\n            _amount -= _paid;\n        }\n        /**\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\n         */\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\n            if (_amount == 0) break;\n            address _pool = getRiskPool[allRiskPools[ii]];\n            address _token = IRiskPool(_pool).currency();\n            uint256 _poolCapital = IERC20(_token).balanceOf(_pool);\n            if (_amount <= _poolCapital) {\n                _requestClaimToPool(_from, _amount, _pool);\n                _amount = 0;\n            } else {\n                _requestClaimToPool(_from, _poolCapital, _pool);\n                _amount -= _poolCapital;\n            }\n        }\n        emit ClaimPaid(_from, _protocolIdx, _amount);\n    }\n\n    function _startCohort() private {\n        uint256 totalCapital = 0;\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\n            address pool = getRiskPool[allRiskPools[ii]];\n            // for now we use total supply cause we deal only Stable coins\n            totalCapital += IERC20(pool).totalSupply();\n        }\n        if (totalCapital >= COHORT_START_CAPITAL) {\n            cohortActiveFrom = block.timestamp;\n        }\n    }\n\n    function hasEnoughCapital(uint16 _protocolIdx, uint256 _amount) private returns (bool hasEnough, uint256 minPremium) {\n        uint256 totalCapital = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\n        uint256 len = allRiskPools.length;\n        bool isLastPool = true;\n        for (uint256 ii = 0; ii < len; ii++) {\n            address pool = getRiskPool[allRiskPools[ii]];\n            // for now we use total supply cause we deal only stable coins\n            uint256 _ts = IERC20(pool).totalSupply();\n            totalCapital += _ts;\n            if (isLastPool && _ts != 0 && ii != len - 1) {\n                isLastPool = false;\n            }\n        }\n        minPremium = isLastPool ? 0 : IPremiumPool(premiumPool).minimumPremium();\n        hasEnough = totalCapital >= (_amount + minPremium);\n    }\n\n    /**\n     * @dev to save gas fee, we need this function\n     */\n    function _requestClaimToPool(\n        address _from,\n        uint256 _amount,\n        address _pool\n    ) private {\n        IRiskPool(_pool).requestClaim(_from, _amount);\n    }\n\n    function setDuration(uint256 _duration) external onlyCohortOwner {\n        duration = _duration;\n    }\n\n    function changePoolPriority(uint8 _prio1, uint8 _prio2) external onlyCohortOwner {\n        address _temp = getRiskPool[allRiskPools[_prio1]];\n        getRiskPool[_prio1] = getRiskPool[allRiskPools[_prio2]];\n        getRiskPool[_prio2] = _temp;\n    }\n\n    function totalPremiumReward(address _account, address _riskPool) external view returns (uint256) {\n        uint256 pr = 0;\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\n            uint16 protocolIdx = allProtocols[ii];\n            pr += premiumReward(_account, _riskPool, protocolIdx);\n        }\n        return pr;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IRiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IRiskPoolFactory {\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _cohort,\n        address _currency,\n        uint256 _APR,\n        uint256 _maxSize\n    ) external returns (address);\n}\n"
    },
    "contracts/interfaces/ICohort.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface ICohort {\n    function requestClaim(\n        address _from,\n        uint16 _protocolIdx,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IRiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IRiskPool {\n    function enter(address _from, uint256 _amount) external;\n\n    function leave(address _to) external;\n\n    function requestClaim(address _from, uint256 _amount) external;\n\n    function currency() external view returns (address);\n\n    function APR() external view returns (uint256);\n\n    function maxSize() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPremiumPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IPremiumPoolFactory {\n    function newPremiumPool(address _currency, uint256 _minimum) external returns (address);\n}\n"
    },
    "contracts/interfaces/IPremiumPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\ninterface IPremiumPool {\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external;\n\n    function withdrawPremium(\n        address _to,\n        uint16 _protocolIdx,\n        uint256 _amount\n    ) external;\n\n    function transferAsset(\n        uint16 _protocolIdx,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function minimumPremium() external returns (uint256);\n\n    function balanceOf(uint16 _protocolIdx) external view returns (uint256);\n\n    function premiumRewardOf(uint16 _protocolIdx) external returns (uint256);\n\n    function currency() external view returns (address);\n\n    function setPremiumReward(uint16 _protocolIdx) external;\n}\n"
    },
    "contracts/RiskPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./UnoERC20.sol\";\nimport \"./interfaces/IRiskPool.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract RiskPool is IRiskPool, UnoERC20 {\n    // ERC20 attributes\n    string public name;\n    string public symbol;\n\n    address public cohort;\n    address public override currency; // for now we should accept only USDT\n    // uint256 public stakingPeriod; // time in seconds\n    uint256 public override maxSize;\n    // maxSize\n    uint256 public override APR; // 1000 - 1\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _cohort,\n        address _currency,\n        uint256 _APR,\n        uint256 _maxSize\n    ) {\n        name = _name;\n        symbol = _symbol;\n        cohort = _cohort;\n        currency = _currency;\n        APR = _APR;\n        maxSize = _maxSize;\n    }\n\n    modifier onlyCohort() {\n        require(msg.sender == cohort, \"UnoRe: RiskPool Forbidden\");\n        _;\n    }\n\n    /**\n     * @dev Users can stake only through Cohort\n     */\n    function enter(address _from, uint256 _amount) external override onlyCohort {\n        // uint256 desired = balanceOf(_from) + _amount;\n        // require(desired < maxInvestment, \"UnoRe: Overflow max staking value\");\n        _mint(_from, _amount);\n    }\n\n    function leave(address _to) external override onlyCohort {\n        require(totalSupply() > 0, \"UnoRe: There's no remaining in the pool\");\n        uint256 poolAmount = IERC20(currency).balanceOf(address(this));\n        uint256 amount = (poolAmount * balanceOf(_to)) / totalSupply();\n        _burn(_to, amount);\n        TransferHelper.safeTransfer(currency, _to, amount);\n    }\n\n    /**\n     * @dev We can trust claim request if its sender is cohort\n     */\n    function requestClaim(address _from, uint256 _amount) external override onlyCohort {\n        TransferHelper.safeTransfer(currency, _from, _amount);\n    }\n}\n"
    },
    "contracts/UnoERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IUnoERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract UnoERC20 is Context, IUnoERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor() {}\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/IUnoERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IUnoERC20 {\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Mocks/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * This smart contract\n */\n\ncontract MockUSDT is Ownable, ERC20 {\n    uint256 INITIAL_SUPPLY = 10000000000 * 10**18;\n\n    mapping(address => uint256) private _faucets;\n    uint256 public constant faucetLimit = 500000 * 10**18;\n\n    constructor() ERC20(\"USDC\", \"USDC\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function faucetToken(uint256 _amount) external {\n        require(msg.sender == owner() || _faucets[msg.sender] + _amount <= faucetLimit, \"Uno: Faucet amount limitation\");\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/ClaimAssessor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/ICohort.sol\";\n\ncontract ClaimAssessor is Ownable, ReentrancyGuard {\n    /**\n     * This smart contract controls the claim request from claimants.\n     * After approving request, this function will be called manually by smart contract owner.\n     */\n    constructor() {}\n\n    function requestClaim(\n        address _from,\n        address _cohort,\n        uint256 _protocolIdx,\n        uint256 _amount\n    ) external onlyOwner nonReentrant {\n        ICohort(_cohort).requestClaim(_from, uint16(_protocolIdx), _amount);\n    }\n}\n"
    },
    "contracts/factories/RiskPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../RiskPool.sol\";\nimport \"../interfaces/IRiskPoolFactory.sol\";\n\ncontract RiskPoolFactory is IRiskPoolFactory {\n    constructor() {}\n\n    function newRiskPool(\n        string calldata _name,\n        string calldata _symbol,\n        address _cohort,\n        address _currency,\n        uint256 _APR,\n        uint256 _maxSize\n    ) external override returns (address) {\n        RiskPool _riskPool = new RiskPool(_name, _symbol, _cohort, _currency, _APR, _maxSize);\n        address _riskPoolAddr = address(_riskPool);\n\n        return _riskPoolAddr;\n    }\n}\n"
    },
    "contracts/PremiumPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.0;\n\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IPremiumPool.sol\";\n\ncontract PremiumPool is IPremiumPool {\n    address private cohort;\n\n    mapping(uint16 => uint256) private _balances; // protocol => premium\n    mapping(uint16 => uint256) private _premiumReward; // protocol => total premium reward\n\n    uint256 private _minimumPremium;\n    address public override currency;\n\n    event PremiumDeposited(uint16 indexed protocolIdx, uint256 amount);\n    event TransferAsset(address indexed _to, uint256 _amount);\n\n    constructor(\n        address _cohort,\n        address _currency,\n        uint256 _minimum\n    ) {\n        cohort = _cohort;\n        currency = _currency;\n        _minimumPremium = _minimum;\n    }\n\n    modifier onlyCohort() {\n        require(msg.sender == cohort, \"UnoRe: Not cohort\");\n        _;\n    }\n\n    function balanceOf(uint16 _protocolIdx) external view override returns (uint256) {\n        return _balances[_protocolIdx];\n    }\n\n    /**\n     * @dev This function gives the total premium reward after coverage\n     */\n    function premiumRewardOf(uint16 _protocolIdx) external view override returns (uint256) {\n        return _premiumReward[_protocolIdx] == 0 ? _balances[_protocolIdx] : _premiumReward[_protocolIdx];\n    }\n\n    function minimumPremium() external view override returns (uint256) {\n        return _minimumPremium;\n    }\n\n    /**\n     * @dev Once premiumReward is set, it is fixed value, not changed according to balance\n     */\n    function setPremiumReward(uint16 _protocolIdx) external override onlyCohort {\n        _premiumReward[_protocolIdx] = _balances[_protocolIdx];\n    }\n\n    /**\n     * It is a bit confusing thing, there's only balance increase without transfer.\n     * But it is Okay, because this PremiumPool and depositPremium function is fully controlled\n     * by Cohort and depositPremium function in Cohort smart contract.\n     */\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external override onlyCohort {\n        _balances[_protocolIdx] += _amount;\n        emit PremiumDeposited(_protocolIdx, _amount);\n    }\n\n    function withdrawPremium(\n        address _to,\n        uint16 _protocolIdx,\n        uint256 _amount\n    ) external override onlyCohort {\n        require(_balances[_protocolIdx] >= _amount, \"UnoRe: Insufficient Premium\");\n        _balances[_protocolIdx] -= _amount;\n        TransferHelper.safeTransfer(currency, _to, _amount);\n    }\n\n    function transferAsset(\n        uint16 _protocolIdx,\n        address _to,\n        uint256 _amount\n    ) external override onlyCohort {\n        _balances[_protocolIdx] -= _amount;\n        TransferHelper.safeTransfer(currency, _to, _amount);\n        emit TransferAsset(_to, _amount);\n    }\n}\n"
    },
    "contracts/factories/PremiumPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.0;\n\nimport \"../PremiumPool.sol\";\nimport \"../interfaces/IPremiumPoolFactory.sol\";\n\ncontract PremiumPoolFactory is IPremiumPoolFactory {\n    constructor() {}\n\n    function newPremiumPool(address _currency, uint256 _minimum) external override returns (address) {\n        PremiumPool _premiumPool = new PremiumPool(msg.sender, _currency, _minimum);\n        address _premiumPoolAddr = address(_premiumPool);\n\n        return _premiumPoolAddr;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}