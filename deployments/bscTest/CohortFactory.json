{
  "address": "0x1Ee92dD0FF595bCF03e9be780A0d47aa57f2C4E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_actuary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "actuary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cohortStartCapital",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_premiumFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minPremium",
          "type": "uint256"
        }
      ],
      "name": "newCohort",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29b873aa195ddd10651186af4bf5b2a685e57d58ad2b68e182f3bf22cdd1d05b",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x1Ee92dD0FF595bCF03e9be780A0d47aa57f2C4E4",
    "transactionIndex": 13,
    "gasUsed": "2867450",
    "logsBloom": "0x
    "blockHash": "0x3365649367ffea95b04f98aa75f251c43fe882e80629d8fc6bd3d4c51864500c",
    "transactionHash": "0x29b873aa195ddd10651186af4bf5b2a685e57d58ad2b68e182f3bf22cdd1d05b",
    "logs": [],
    "blockNumber": 12283003,
    "cumulativeGasUsed": "5028465",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1F111b0E72954E32f79aE6c258FABa21FFf93B86"
  ],
  "solcInputHash": "604ea37c2335432500405b2ce59f3005",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_actuary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"actuary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cohortStartCapital\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_premiumFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPremium\",\"type\":\"uint256\"}],\"name\":\"newCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/CohortFactory.sol\":\"CohortFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/ICohort.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./interfaces/IPremiumPoolFactory.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract Cohort is ICohort, ReentrancyGuard {\\n    // It should be okay if Protocol is struct\\n    struct Protocol {\\n        uint256 coverDuration; // Duration of the protocol cover products\\n        address protocolAddress; // Address of that protocol\\n        string name; // protocol name\\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\\n        string premiumDescription;\\n        uint16 avgLR; // LR means Loss Ratio, default 1000 = 1\\n        bool exist; // initial true\\n    }\\n\\n    address public factory;\\n    address public claimAssessor;\\n    address public premiumPool;\\n    address public owner;\\n    string public name;\\n    // uint public TVLc;\\n    // uint public combinedRisk;\\n    uint256 public duration;\\n    // uint8 public status;\\n    uint256 public cohortActiveFrom;\\n\\n    // for now we set this as constant\\n    uint256 public immutable COHORT_START_CAPITAL;\\n\\n    mapping(uint16 => Protocol) public getProtocol;\\n    uint16[] private allProtocols;\\n\\n    mapping(uint8 => address) public getRiskPool;\\n    uint8[] private allRiskPools;\\n\\n    // pool => amount => pool capital\\n    mapping(address => uint256) private poolCapital;\\n    uint256 private totalAPRofPools;\\n    uint256 private MAX_INTEGER = type(uint256).max;\\n\\n    event ProtocolCreated(address indexed _cohort, uint16 _protocolIdx);\\n    event PremiumDeposited(address indexed _cohort, uint16 _protocolIdx, uint256 _amount);\\n    event RiskPoolCreated(address indexed _cohort, address indexed _pool);\\n    event StakedInPool(address indexed _staker, address indexed pool, uint256 _amount);\\n    event LeftPool(address indexed _staker, address indexed _pool);\\n    event ClaimPaid(address indexed _claimer, uint256 _protocolIdx, uint256 _amount);\\n\\n    constructor(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital\\n    ) {\\n        owner = _owner;\\n        name = _name;\\n        COHORT_START_CAPITAL = _cohortStartCapital;\\n        claimAssessor = _claimAssessor;\\n        factory = msg.sender;\\n    }\\n\\n    modifier onlyCohortOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function allProtocolsLength() external view returns (uint256) {\\n        return allProtocols.length;\\n    }\\n\\n    function allRiskPoolLength() external view returns (uint256) {\\n        return allRiskPools.length;\\n    }\\n\\n    /**\\n     * @dev We separated createPremiumPool from constructor to keep light constructor\\n     */\\n    function createPremiumPool(\\n        address _factory,\\n        address _currency,\\n        uint256 _minimum\\n    ) external {\\n        require(msg.sender == factory, \\\"UnoRe: Forbidden\\\");\\n        premiumPool = IPremiumPoolFactory(_factory).newPremiumPool(_currency, _minimum);\\n    }\\n\\n    // This action can be done only by cohort owner\\n    function addProtocol(\\n        string calldata _name,\\n        address _protocolAddress,\\n        string calldata _productType,\\n        string calldata _premiumDescription,\\n        uint256 _coverDuration\\n    ) external onlyCohortOwner {\\n        uint16 lastIdx = allProtocols.length > 0 ? allProtocols[allProtocols.length - 1] + 1 : 0;\\n        allProtocols.push(lastIdx);\\n        getProtocol[lastIdx] = Protocol({\\n            coverDuration: _coverDuration,\\n            protocolAddress: _protocolAddress,\\n            name: _name,\\n            productType: _productType,\\n            premiumDescription: _premiumDescription,\\n            avgLR: 1000, //\\n            exist: true\\n        });\\n\\n        if (duration < _coverDuration) {\\n            duration = _coverDuration;\\n        }\\n        emit ProtocolCreated(address(this), lastIdx);\\n    }\\n\\n    /**\\n     * @dev create Risk pool from cohort owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external onlyCohortOwner returns (address pool) {\\n        uint256 len = allRiskPools.length;\\n        pool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency, _APR, _maxSize);\\n\\n        uint8 lastIdx = len > 0 ? allRiskPools[len - 1] + 1 : 0;\\n        allRiskPools.push(lastIdx);\\n        getRiskPool[lastIdx] = pool;\\n        totalAPRofPools += _APR;\\n        poolCapital[pool] = MAX_INTEGER;\\n        emit RiskPoolCreated(address(this), pool);\\n    }\\n\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        TransferHelper.safeTransferFrom(IPremiumPool(premiumPool).currency(), msg.sender, premiumPool, _amount);\\n        IPremiumPool(premiumPool).depositPremium(_protocolIdx, _amount);\\n        emit PremiumDeposited(address(this), _protocolIdx, _amount);\\n    }\\n\\n    function enterInPool(\\n        address _from,\\n        address _pool,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        require(cohortActiveFrom == 0, \\\"UnoRe: Staking was Ended\\\");\\n        require(poolCapital[_pool] == MAX_INTEGER || poolCapital[_pool] != 0, \\\"UnoRe: RiskPool not exist\\\");\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        uint256 _poolMaxSize = IRiskPool(_pool).maxSize();\\n        uint256 _currentSupply = IERC20(_pool).totalSupply(); // It's Okay using totalSupply here, because there's no withdrawl during staking.\\n        require(_poolMaxSize >= (_amount + _currentSupply), \\\"UnoRe: RiskPool overflow\\\");\\n        address token = IRiskPool(_pool).currency();\\n        TransferHelper.safeTransferFrom(token, _from, _pool, _amount);\\n        IRiskPool(_pool).enter(_from, _amount);\\n        poolCapital[_pool] == MAX_INTEGER ? poolCapital[_pool] = _amount : poolCapital[_pool] += _amount;\\n        _startCohort();\\n\\n        emit StakedInPool(_from, _pool, _amount);\\n    }\\n\\n    /**\\n     * @dev for now we assume protocols send premium to cohort smart contract\\n     */\\n    function leaveFromPool(address _to, address _pool) external nonReentrant {\\n        require(cohortActiveFrom != 0 && block.timestamp - cohortActiveFrom > duration, \\\"UnoRe: Forbidden\\\");\\n        require(poolCapital[_pool] != 0 && poolCapital[_pool] != MAX_INTEGER, \\\"UnoRe: RiskPool not exist or empty\\\");\\n        // Withdraw remaining from pool\\n        uint256 amount = IERC20(_pool).balanceOf(_to);\\n        require(amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        // get premium rewards\\n        /**\\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\\n         */\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\n            uint16 protocolIdx = allProtocols[ii];\\n            IPremiumPool(premiumPool).setPremiumReward(protocolIdx);\\n            uint256 _pr = premiumReward(_to, _pool, protocolIdx);\\n            IPremiumPool(premiumPool).withdrawPremium(_to, protocolIdx, _pr);\\n        }\\n\\n        IRiskPool(_pool).leave(_to);\\n        emit LeftPool(_to, _pool);\\n    }\\n\\n    /**\\n     * @dev This function shows the premium reward which user can get.\\n     * It can be changed in staking and coverage duration, but should be fixed value after coverage.\\n     */\\n    function premiumReward(\\n        address _account,\\n        address _riskPool,\\n        uint16 _protocolIdx\\n    ) public view returns (uint256) {\\n        if (poolCapital[_riskPool] == 0 || poolCapital[_riskPool] == MAX_INTEGER || totalAPRofPools == 0) {\\n            return 0;\\n        }\\n        uint256 _totalPr = IPremiumPool(premiumPool).premiumRewardOf(_protocolIdx);\\n        uint256 amount = IERC20(_riskPool).balanceOf(_account);\\n        uint256 denominator = poolCapital[_riskPool] * totalAPRofPools;\\n        uint256 numerator = _totalPr * amount * IRiskPool(_riskPool).APR();\\n        return numerator / denominator;\\n    }\\n\\n    /**\\n     * @dev for now all premiums and risk pools are paid in stable coin\\n     * @dev we can trust claim request from ClaimAssesor\\n     */\\n    function requestClaim(\\n        address _from,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        require(block.timestamp - cohortActiveFrom <= duration && cohortActiveFrom != 0, \\\"UnoRe: Forbidden\\\");\\n        (bool hasEnough, uint256 minPremium) = hasEnoughCapital(_protocolIdx, _amount);\\n        require(hasEnough == true, \\\"UnoRe: Capital is not enough\\\");\\n\\n        uint256 currentPremium = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\n        /** We should remain minimum amount in premium pool\\n         * Uno Res reinsurance mechanism works in the following manner.\\n         * There is a premium pool, into which all the premium collected from various protocols is held.\\n         * At the end of the policy period, the premium is distributed to the 3 risk pools in accordance with the rewards distribution formula.\\n         *\\n         * The claims payout, is first done from the premium pool,\\n         * after it's exhaustion the risk pool 1 is used then risk pool 2 and so on.\\n         *\\n         * There is a need of a minimum reserve premium to account for case scenarios\\n         * where claims are incurred and premium pool and risk pool 1 is completely exhausted.\\n         * The min premium reserve will be used to allocate rewards to all the pools (risk pool 1, risk pool 2, risk pool 3, etc.. )\\n         */\\n        if (_amount + minPremium <= currentPremium) {\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _amount);\\n            emit ClaimPaid(_from, _protocolIdx, _amount);\\n            return;\\n        }\\n        if (currentPremium > minPremium) {\\n            // Tranfer from premium\\n            uint256 _paid = currentPremium - minPremium;\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _paid);\\n            _amount -= _paid;\\n        }\\n        /**\\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\\n         */\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\n            if (_amount == 0) break;\\n            address _pool = getRiskPool[allRiskPools[ii]];\\n            address _token = IRiskPool(_pool).currency();\\n            uint256 _poolCapital = IERC20(_token).balanceOf(_pool);\\n            if (_amount <= _poolCapital) {\\n                _requestClaimToPool(_from, _amount, _pool);\\n                _amount = 0;\\n            } else {\\n                _requestClaimToPool(_from, _poolCapital, _pool);\\n                _amount -= _poolCapital;\\n            }\\n        }\\n        emit ClaimPaid(_from, _protocolIdx, _amount);\\n    }\\n\\n    function _startCohort() private {\\n        uint256 totalCapital = 0;\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\n            address pool = getRiskPool[allRiskPools[ii]];\\n            // for now we use total supply cause we deal only Stable coins\\n            totalCapital += IERC20(pool).totalSupply();\\n        }\\n        if (totalCapital >= COHORT_START_CAPITAL) {\\n            cohortActiveFrom = block.timestamp;\\n        }\\n    }\\n\\n    function hasEnoughCapital(uint16 _protocolIdx, uint256 _amount) private returns (bool hasEnough, uint256 minPremium) {\\n        uint256 totalCapital = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\n        uint256 len = allRiskPools.length;\\n        bool isLastPool = true;\\n        for (uint256 ii = 0; ii < len; ii++) {\\n            address pool = getRiskPool[allRiskPools[ii]];\\n            // for now we use total supply cause we deal only stable coins\\n            uint256 _ts = IERC20(pool).totalSupply();\\n            totalCapital += _ts;\\n            if (isLastPool && _ts != 0 && ii != len - 1) {\\n                isLastPool = false;\\n            }\\n        }\\n        minPremium = isLastPool ? 0 : IPremiumPool(premiumPool).minimumPremium();\\n        hasEnough = totalCapital >= (_amount + minPremium);\\n    }\\n\\n    /**\\n     * @dev to save gas fee, we need this function\\n     */\\n    function _requestClaimToPool(\\n        address _from,\\n        uint256 _amount,\\n        address _pool\\n    ) private {\\n        IRiskPool(_pool).requestClaim(_from, _amount);\\n    }\\n\\n    function setDuration(uint256 _duration) external onlyCohortOwner {\\n        duration = _duration;\\n    }\\n\\n    function changePoolPriority(uint8 _prio1, uint8 _prio2) external onlyCohortOwner {\\n        address _temp = getRiskPool[allRiskPools[_prio1]];\\n        getRiskPool[_prio1] = getRiskPool[allRiskPools[_prio2]];\\n        getRiskPool[_prio2] = _temp;\\n    }\\n\\n    function totalPremiumReward(address _account, address _riskPool) external view returns (uint256) {\\n        uint256 pr = 0;\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\n            uint16 protocolIdx = allProtocols[ii];\\n            pr += premiumReward(_account, _riskPool, protocolIdx);\\n        }\\n        return pr;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ef998a2ace79d7c25d80f8c762b7f7ebe9becd3fe0e086bb3c78511c1af449\",\"license\":\"GPL-3.0\"},\"contracts/factories/CohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../Cohort.sol\\\";\\nimport \\\"../interfaces/ICohortFactory.sol\\\";\\n\\ncontract CohortFactory is ICohortFactory {\\n    address public actuary;\\n\\n    constructor(address _actuary) {\\n        actuary = _actuary;\\n    }\\n\\n    function newCohort(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital,\\n        address _premiumFactory,\\n        address _premiumCurrency,\\n        uint256 _minPremium\\n    ) external override returns (address) {\\n        require(msg.sender == actuary, \\\"Uno Re:Forbidden\\\");\\n        Cohort _cohort = new Cohort(_owner, _name, _claimAssessor, _cohortStartCapital);\\n\\n        _cohort.createPremiumPool(_premiumFactory, _premiumCurrency, _minPremium);\\n        return address(_cohort);\\n    }\\n}\\n\",\"keccak256\":\"0x7650b7478f982c0784af493c585566c2abaf1bf4cad4fc9fd59e059bb685813a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICohort.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ICohort {\\n    function requestClaim(\\n        address _from,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x732b57d2746778c9a380a7274c0154c77b151fd88155ab96e6571e35987b6f74\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ICohortFactory {\\n    function newCohort(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital,\\n        address _premiumFactory,\\n        address _premiumCurrency,\\n        uint256 _minPremium\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xcdb51932d725209a9cf85aae2218fef0de61dbe26c0184afafb2175c7e8acca7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPool {\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external;\\n\\n    function withdrawPremium(\\n        address _to,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferAsset(\\n        uint16 _protocolIdx,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function minimumPremium() external returns (uint256);\\n\\n    function balanceOf(uint16 _protocolIdx) external view returns (uint256);\\n\\n    function premiumRewardOf(uint16 _protocolIdx) external view returns (uint256);\\n\\n    function currency() external view returns (address);\\n\\n    function setPremiumReward(uint16 _protocolIdx) external;\\n}\\n\",\"keccak256\":\"0x01505516fb14bf611fbd12d17947c514e1e230daf003f137c274e8e9e9e43de6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPremiumPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPoolFactory {\\n    function newPremiumPool(address _currency, uint256 _minimum) external returns (address);\\n}\\n\",\"keccak256\":\"0x83066636bc349858740476b3e146f3a4a6584333bbb9363f1805cb7ec9946bec\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leave(address _to) external;\\n\\n    function requestClaim(address _from, uint256 _amount) external;\\n\\n    function currency() external view returns (address);\\n\\n    function APR() external view returns (uint256);\\n\\n    function maxSize() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x25ccfd36817280b5c14482cbc2b9cc1786476c5ab7484491d827affca0ed273b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x10672c3fe256e07ae1ca2fe1fc73bb150b4a4ba2f103931230c179259a97ab95\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x12d85c742c461bc19d89b9807607c2f674cfc30c4baf00268605f050f19f4887\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161331c38038061331c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b61328b806100916000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637a95129b1461003b578063ba332fa414610059575b600080fd5b61004361006c565b604051610050919061028c565b60405180910390f35b610043610067366004610186565b61007b565b6000546001600160a01b031681565b600080546001600160a01b031633146100af5760405162461bcd60e51b81526004016100a69061033e565b60405180910390fd5b6000888888886040516100c19061015d565b6100ce94939291906102c4565b604051809103906000f0801580156100ea573d6000803e3d6000fd5b50604051636464abdb60e01b81529091506001600160a01b03821690636464abdb9061011e908890889088906004016102a0565b600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b50929b9a5050505050505050505050565b612eca8061038c83390190565b80356001600160a01b038116811461018157600080fd5b919050565b600080600080600080600060e0888a0312156101a0578283fd5b6101a98861016a565b965060208089013567ffffffffffffffff808211156101c6578586fd5b818b0191508b601f8301126101d9578586fd5b8135818111156101eb576101eb610375565b604051601f8201601f191681018501838111828210171561020e5761020e610375565b60405281815283820185018e1015610224578788fd5b818585018683013787858383010152809a5050505050506102476040890161016a565b94506060880135935061025c6080890161016a565b925061026a60a0890161016a565b915060c0880135905092959891949750929550565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038616825260206080818401528551806080850152825b818110156103005787810183015185820160a0015282016102e4565b81811115610311578360a083870101525b50601f01601f1916830160a001915061032f9050604083018561027f565b82606083015295945050505050565b60208082526010908201527f556e6f2052653a466f7262696464656e00000000000000000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fdfe60a0604052600019600e553480156200001757600080fd5b5060405162002eca38038062002eca8339810160408190526200003a9162000168565b6001600055600480546001600160a01b0319166001600160a01b03861617905582516200006f906005906020860190620000a5565b50608052600280546001600160a01b039092166001600160a01b0319928316179055600180549091163317905550620002bb9050565b828054620000b39062000268565b90600052602060002090601f016020900481019282620000d7576000855562000122565b82601f10620000f257805160ff191683800117855562000122565b8280016001018555821562000122579182015b828111156200012257825182559160200191906001019062000105565b506200013092915062000134565b5090565b5b8082111562000130576000815560010162000135565b80516001600160a01b03811681146200016357600080fd5b919050565b600080600080608085870312156200017e578384fd5b62000189856200014b565b602086810151919550906001600160401b0380821115620001a8578586fd5b818801915088601f830112620001bc578586fd5b815181811115620001d157620001d1620002a5565b604051601f8201601f1916810185018381118282101715620001f757620001f7620002a5565b60405281815283820185018b10156200020e578788fd5b8792505b8183101562000231578383018501518184018601529184019162000212565b818311156200024257878583830101525b809750505050505062000258604086016200014b565b6060959095015193969295505050565b6002810460018216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b608051612bec620002de6000396000818161132601526121be0152612bec6000f3fe608060405234801561001057600080fd5b506004361061017d5760003560e01c806363186b20116100e3578063c3dcfcf11161008c578063d2c7c2a411610066578063d2c7c2a4146102c2578063eea3dd47146102e8578063f6be71d1146102fb5761017d565b8063c3dcfcf11461029f578063c45a0155146102b2578063c6e89915146102ba5761017d565b8063ac1029f8116100bd578063ac1029f81461027c578063b381ff8214610284578063be307d461461028c5761017d565b806363186b201461024e5780636464abdb146102615780638da5cb5b146102745761017d565b8063128c7001116101455780634ba69faa1161011f5780634ba69faa1461022057806355cc7b38146102285780635fbfdf7d1461023b5761017d565b8063128c7001146101e557806334db3990146101ed5780633f62327d1461020d5761017d565b806306fdde03146101825780630a3ecc6e146101a05780630c58ae78146101b55780630fb5a6b4146101d55780631083b856146101dd575b600080fd5b61018a61030e565b604051610197919061277f565b60405180910390f35b6101b36101ae3660046123cd565b61039c565b005b6101c86101c336600461230f565b610854565b60405161019791906129d5565b6101c86108df565b6101c86108e5565b6101c86108eb565b6102006101fb3660046125f3565b6108f1565b60405161019791906126b1565b6101b361021b36600461259a565b61090c565b610200610a93565b6101b361023636600461260d565b610aa2565b6101b361024936600461238d565b610bc8565b6101b361025c36600461242a565b610f50565b6101b361026f36600461238d565b611246565b610200611315565b6101c8611324565b6101c8611348565b6101c861029a366004612347565b61134e565b6102006102ad3660046124dc565b611572565b610200611781565b610200611790565b6102d56102d0366004612580565b61179f565b60405161019797969594939291906129de565b6101b36102f636600461230f565b611986565b6101b36103093660046125c3565b611cc2565b6005805461031b90612b35565b80601f016020809104026020016040519081016040528092919081815260200182805461034790612b35565b80156103945780601f1061036957610100808354040283529160200191610394565b820191906000526020600020905b81548152906001019060200180831161037757829003601f168201915b505050505081565b600260005414156103c85760405162461bcd60e51b81526004016103bf9061297b565b60405180910390fd5b60026000819055546001600160a01b031633146103f75760405162461bcd60e51b81526004016103bf906128cb565b806104145760405162461bcd60e51b81526004016103bf9061285d565b6006546007546104249042612aee565b11158015610433575060075415155b61044f5760405162461bcd60e51b81526004016103bf906128cb565b60008061045c8484611cf1565b90925090506001821515146104835760405162461bcd60e51b81526004016103bf90612944565b60035460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d906104b49088906004016129b2565b60206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050491906125db565b9050806105118386612a72565b116105c7576003546040516323c4859f60e21b81526001600160a01b0390911690638f12167c9061054a908990899089906004016126e9565b600060405180830381600087803b15801561056457600080fd5b505af1158015610578573d6000803e3d6000fd5b50505050856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a86866040516105b79291906129c1565b60405180910390a250505061084a565b818111156106525760006105db8383612aee565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c90610610908a908a9086906004016126e9565b600060405180830381600087803b15801561062a57600080fd5b505af115801561063e573d6000803e3d6000fd5b50505050808561064e9190612aee565b9450505b60005b600b54811015610802578461066957610802565b6000600a6000600b848154811061069057634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff168352828101939093526040918201812054825163e5a6b10f60e01b815292516001600160a01b0390911694509092849263e5a6b10f9260048083019392829003018186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906122f3565b90506000816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040161076791906126b1565b60206040518083038186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b791906125db565b90508088116107d4576107cb8a8985611f57565b600097506107ec565b6107df8a8285611f57565b6107e98189612aee565b97505b50505080806107fa90612b70565b915050610655565b50856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a868660405161083e9291906129c1565b60405180910390a25050505b5050600160005550565b600080805b6009548110156108d75760006009828154811061088657634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1690506108b786868361134e565b6108c19084612a72565b92505080806108cf90612b70565b915050610859565b509392505050565b60065481565b600b5490565b60075481565b600a602052600090815260409020546001600160a01b031681565b6002600054141561092f5760405162461bcd60e51b81526004016103bf9061297b565b6002600055806109515760405162461bcd60e51b81526004016103bf9061285d565b6003546040805163e5a6b10f60e01b815290516109e3926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906122f3565b60035433906001600160a01b031684611fbc565b600354604051633f62327d60e01b81526001600160a01b0390911690633f62327d90610a1590859085906004016129c1565b600060405180830381600087803b158015610a2f57600080fd5b505af1158015610a43573d6000803e3d6000fd5b50505050306001600160a01b03167f6f478da447863bf1d87ffc6967f8ba188546e83cc222b62f2e70fd993cfdafa98383604051610a829291906129c1565b60405180910390a250506001600055565b6003546001600160a01b031681565b6004546001600160a01b03163314610acc5760405162461bcd60e51b81526004016103bf906128cb565b6000600a6000600b8560ff1681548110610af657634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528301939093526040909101812054600b80546001600160a01b039092169450600a939091908616908110610b5a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528381019490945260409283018220549681168252600a90935281812080546001600160a01b03199081166001600160a01b039889161790915594909216825290208054919093169116179055565b60026000541415610beb5760405162461bcd60e51b81526004016103bf9061297b565b600260005560075415610c105760405162461bcd60e51b81526004016103bf90612894565b600e546001600160a01b0383166000908152600c60205260409020541480610c4f57506001600160a01b0382166000908152600c602052604090205415155b610c6b5760405162461bcd60e51b81526004016103bf90612792565b80610c885760405162461bcd60e51b81526004016103bf9061285d565b6000826001600160a01b0316632565b1596040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb91906125db565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3857600080fd5b505afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7091906125db565b9050610d7c8184612a72565b821015610d9b5760405162461bcd60e51b81526004016103bf90612826565b6000846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e91906122f3565b9050610e1c81878787611fbc565b604051637e348b7d60e01b81526001600160a01b03861690637e348b7d90610e4a908990889060040161270e565b600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b5050600e546001600160a01b0388166000908152600c6020526040902054149150610ed29050576001600160a01b0385166000908152600c602052604081208054869290610ec7908490612a72565b925050819055610eef565b6001600160a01b0385166000908152600c60205260409020849055835b50610ef86120c1565b846001600160a01b0316866001600160a01b03167fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f86604051610f3b91906129d5565b60405180910390a35050600160005550505050565b6004546001600160a01b03163314610f7a5760405162461bcd60e51b81526004016103bf906128cb565b600954600090610f8b576000610fe9565b60098054610f9b90600190612aee565b81548110610fb957634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166001610fe99190612a4c565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f9092166002026101000a61ffff81810219909316928416029190911790556040805160e0810182528481526001600160a01b038a166020808301919091528251601f8d0182900482028101820184528c8152939450909291830191908c908c9081908401838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250506103e86020808501919091526001604094850181905261ffff871684526008825292849020855181558582015193810180546001600160a01b0319166001600160a01b03909516949094179093559284015180519293611178936002860193509101906121eb565b50606082015180516111949160038401916020909101906121eb565b50608082015180516111b09160048401916020909101906121eb565b5060a08201516005909101805460c0909301511515620100000262ff00001961ffff90931661ffff1990941693909317919091169190911790556006548211156111fa5760068290555b306001600160a01b03167fbcf8a46c68576cc4e52eb8fbc678b3ce3adbeadb33126980d791f827ccff41118260405161123391906129b2565b60405180910390a2505050505050505050565b6001546001600160a01b031633146112705760405162461bcd60e51b81526004016103bf906128cb565b604051635800f04d60e11b81526001600160a01b0384169063b001e09a9061129e908590859060040161270e565b602060405180830381600087803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f091906122f3565b600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b6004546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095490565b6001600160a01b0382166000908152600c6020526040812054158061138c5750600e546001600160a01b0384166000908152600c6020526040902054145b806113975750600d54155b156113a45750600061156b565b6003546040516306c91eaf60e41b81526000916001600160a01b031690636c91eaf0906113d59086906004016129b2565b60206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142591906125db565b90506000846001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161145591906126b1565b60206040518083038186803b15801561146d57600080fd5b505afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a591906125db565b600d546001600160a01b0387166000908152600c6020526040812054929350916114cf9190612acf565b90506000866001600160a01b031663bd30558e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561150c57600080fd5b505afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154491906125db565b61154e8486612acf565b6115589190612acf565b90506115648282612aaf565b9450505050505b9392505050565b6004546000906001600160a01b0316331461159f5760405162461bcd60e51b81526004016103bf906128cb565b600b54604051634f35e6d560e01b81526001600160a01b03871690634f35e6d5906115dc908d908d908d908d9030908d908d908d90600401612727565b602060405180830381600087803b1580156115f657600080fd5b505af115801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e91906122f3565b91506000808211611640576000611697565b600b61164d600184612aee565b8154811061166b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016116979190612a8a565b600b80546001810190915560208082047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805460ff808616601f9095166101000a8581029102199091161790556000918252600a90526040812080546001600160a01b0387166001600160a01b0319909116179055600d80549293508792909190611724908490612a72565b9091555050600e546001600160a01b0384166000818152600c6020526040808220939093559151909130917f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd583802179190a3505098975050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031681565b60086020526000908152604090208054600182015460028301805492936001600160a01b03909216926117d190612b35565b80601f01602080910402602001604051908101604052809291908181526020018280546117fd90612b35565b801561184a5780601f1061181f5761010080835404028352916020019161184a565b820191906000526020600020905b81548152906001019060200180831161182d57829003601f168201915b50505050509080600301805461185f90612b35565b80601f016020809104026020016040519081016040528092919081815260200182805461188b90612b35565b80156118d85780601f106118ad576101008083540402835291602001916118d8565b820191906000526020600020905b8154815290600101906020018083116118bb57829003601f168201915b5050505050908060040180546118ed90612b35565b80601f016020809104026020016040519081016040528092919081815260200182805461191990612b35565b80156119665780601f1061193b57610100808354040283529160200191611966565b820191906000526020600020905b81548152906001019060200180831161194957829003601f168201915b5050506005909301549192505061ffff81169060ff620100009091041687565b600260005414156119a95760405162461bcd60e51b81526004016103bf9061297b565b6002600055600754158015906119cc57506006546007546119ca9042612aee565b115b6119e85760405162461bcd60e51b81526004016103bf906128cb565b6001600160a01b0381166000908152600c602052604090205415801590611a295750600e546001600160a01b0382166000908152600c602052604090205414155b611a455760405162461bcd60e51b81526004016103bf90612902565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611a749086906004016126b1565b60206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac491906125db565b905080611ae35760405162461bcd60e51b81526004016103bf9061285d565b60005b600954811015611c2157600060098281548110611b1357634e487b7160e01b600052603260045260246000fd5b6000918252602090912060108204015460035460405163bcd84a7160e01b8152600f9093166002026101000a90910461ffff1692506001600160a01b03169063bcd84a7190611b669084906004016129b2565b600060405180830381600087803b158015611b8057600080fd5b505af1158015611b94573d6000803e3d6000fd5b505050506000611ba586868461134e565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c90611bda908990869086906004016126e9565b600060405180830381600087803b158015611bf457600080fd5b505af1158015611c08573d6000803e3d6000fd5b5050505050508080611c1990612b70565b915050611ae6565b50604051635f6fbbd360e11b81526001600160a01b0383169063bedf77a690611c4e9086906004016126b1565b600060405180830381600087803b158015611c6857600080fd5b505af1158015611c7c573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f3fdbe9ffcd54f2ab6b430c78a338bde8aefdc06f4720928defb03e50e9da853290600090a35050600160005550565b6004546001600160a01b03163314611cec5760405162461bcd60e51b81526004016103bf906128cb565b600655565b60035460405163cfbff97d60e01b8152600091829182916001600160a01b03169063cfbff97d90611d269088906004016129b2565b60206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906125db565b600b54909150600160005b82811015611ea6576000600a6000600b8481548110611db057634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820181205482516318160ddd60e01b815292516001600160a01b039091169450909284926318160ddd9260048083019392829003018186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5791906125db565b9050611e638187612a72565b9550838015611e7157508015155b8015611e875750611e83600186612aee565b8314155b15611e9157600093505b50508080611e9e90612b70565b915050611d81565b5080611f3957600360009054906101000a90046001600160a01b03166001600160a01b031663087d8d016040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611efc57600080fd5b505af1158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906125db565b611f3c565b60005b9350611f488487612a72565b83101594505050509250929050565b6040516301e51e9760e01b81526001600160a01b038216906301e51e9790611f85908690869060040161270e565b600060405180830381600087803b158015611f9f57600080fd5b505af1158015611fb3573d6000803e3d6000fd5b50505050505050565b600080856001600160a01b03166323b872dd868686604051602401611fe3939291906126c5565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516120319190612695565b6000604051808303816000865af19150503d806000811461206e576040519150601f19603f3d011682016040523d82523d6000602084013e612073565b606091505b509150915081801561209d57508051158061209d57508080602001905181019061209d919061240a565b6120b95760405162461bcd60e51b81526004016103bf906127c9565b505050505050565b6000805b600b548110156121bb576000600a6000600b84815481106120f657634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b15801561216357600080fd5b505afa158015612177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219b91906125db565b6121a59084612a72565b92505080806121b390612b70565b9150506120c5565b507f000000000000000000000000000000000000000000000000000000000000000081106121e857426007555b50565b8280546121f790612b35565b90600052602060002090601f016020900481019282612219576000855561225f565b82601f1061223257805160ff191683800117855561225f565b8280016001018555821561225f579182015b8281111561225f578251825591602001919060010190612244565b5061226b92915061226f565b5090565b5b8082111561226b5760008155600101612270565b60008083601f840112612295578182fd5b50813567ffffffffffffffff8111156122ac578182fd5b6020830191508360208285010111156122c457600080fd5b9250929050565b803561ffff811681146122dd57600080fd5b919050565b803560ff811681146122dd57600080fd5b600060208284031215612304578081fd5b815161156b81612ba1565b60008060408385031215612321578081fd5b823561232c81612ba1565b9150602083013561233c81612ba1565b809150509250929050565b60008060006060848603121561235b578081fd5b833561236681612ba1565b9250602084013561237681612ba1565b9150612384604085016122cb565b90509250925092565b6000806000606084860312156123a1578283fd5b83356123ac81612ba1565b925060208401356123bc81612ba1565b929592945050506040919091013590565b6000806000606084860312156123e1578283fd5b83356123ec81612ba1565b92506123fa602085016122cb565b9150604084013590509250925092565b60006020828403121561241b578081fd5b8151801515811461156b578182fd5b60008060008060008060008060a0898b031215612445578384fd5b883567ffffffffffffffff8082111561245c578586fd5b6124688c838d01612284565b909a50985060208b0135915061247d82612ba1565b90965060408a01359080821115612492578586fd5b61249e8c838d01612284565b909750955060608b01359150808211156124b6578485fd5b506124c38b828c01612284565b999c989b50969995989497949560800135949350505050565b60008060008060008060008060c0898b0312156124f7578384fd5b883567ffffffffffffffff8082111561250e578586fd5b61251a8c838d01612284565b909a50985060208b0135915080821115612532578586fd5b5061253f8b828c01612284565b909750955050604089013561255381612ba1565b9350606089013561256381612ba1565b979a969950949793969295929450505060808201359160a0013590565b600060208284031215612591578081fd5b61156b826122cb565b600080604083850312156125ac578182fd5b6125b5836122cb565b946020939093013593505050565b6000602082840312156125d4578081fd5b5035919050565b6000602082840312156125ec578081fd5b5051919050565b600060208284031215612604578081fd5b61156b826122e2565b6000806040838503121561261f578182fd5b612628836122e2565b9150612636602084016122e2565b90509250929050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612681816020860160208601612b05565b601f01601f19169290920160200192915050565b600082516126a7818460208701612b05565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835261ffff919091166020830152604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060c0825261273b60c083018a8c61263f565b828103602084015261274e81898b61263f565b6001600160a01b03978816604085015295909616606083015250608081019290925260a09091015295945050505050565b60006020825261156b6020830184612669565b60208082526019908201527f556e6f52653a205269736b506f6f6c206e6f7420657869737400000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a205269736b506f6f6c206f766572666c6f770000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a205374616b696e672077617320456e6465640000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b60208082526022908201527f556e6f52653a205269736b506f6f6c206e6f74206578697374206f7220656d70604082015261747960f01b606082015260800190565b6020808252601c908201527f556e6f52653a204361706974616c206973206e6f7420656e6f75676800000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff91909116815260200190565b61ffff929092168252602082015260400190565b90815260200190565b60008882526001600160a01b038816602083015260e06040830152612a0660e0830188612669565b8281036060840152612a188188612669565b90508281036080840152612a2c8187612669565b61ffff9590951660a0840152505090151560c09091015295945050505050565b600061ffff808316818516808303821115612a6957612a69612b8b565b01949350505050565b60008219821115612a8557612a85612b8b565b500190565b600060ff821660ff84168060ff03821115612aa757612aa7612b8b565b019392505050565b600082612aca57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612ae957612ae9612b8b565b500290565b600082821015612b0057612b00612b8b565b500390565b60005b83811015612b20578181015183820152602001612b08565b83811115612b2f576000848401525b50505050565b600281046001821680612b4957607f821691505b60208210811415612b6a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612b8457612b84612b8b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146121e857600080fdfea26469706673582212204ce62b9e48d2cccaab5293ba0a769de65624a78afaee9d4c03c0fa2149bf58fe64736f6c63430008000033a2646970667358221220e5ff8125326ee60c61c30d0ed37aabe0a20aebb36db84b9452a0e29f273d5c7864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637a95129b1461003b578063ba332fa414610059575b600080fd5b61004361006c565b604051610050919061028c565b60405180910390f35b610043610067366004610186565b61007b565b6000546001600160a01b031681565b600080546001600160a01b031633146100af5760405162461bcd60e51b81526004016100a69061033e565b60405180910390fd5b6000888888886040516100c19061015d565b6100ce94939291906102c4565b604051809103906000f0801580156100ea573d6000803e3d6000fd5b50604051636464abdb60e01b81529091506001600160a01b03821690636464abdb9061011e908890889088906004016102a0565b600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b50929b9a5050505050505050505050565b612eca8061038c83390190565b80356001600160a01b038116811461018157600080fd5b919050565b600080600080600080600060e0888a0312156101a0578283fd5b6101a98861016a565b965060208089013567ffffffffffffffff808211156101c6578586fd5b818b0191508b601f8301126101d9578586fd5b8135818111156101eb576101eb610375565b604051601f8201601f191681018501838111828210171561020e5761020e610375565b60405281815283820185018e1015610224578788fd5b818585018683013787858383010152809a5050505050506102476040890161016a565b94506060880135935061025c6080890161016a565b925061026a60a0890161016a565b915060c0880135905092959891949750929550565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038616825260206080818401528551806080850152825b818110156103005787810183015185820160a0015282016102e4565b81811115610311578360a083870101525b50601f01601f1916830160a001915061032f9050604083018561027f565b82606083015295945050505050565b60208082526010908201527f556e6f2052653a466f7262696464656e00000000000000000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fdfe60a0604052600019600e553480156200001757600080fd5b5060405162002eca38038062002eca8339810160408190526200003a9162000168565b6001600055600480546001600160a01b0319166001600160a01b03861617905582516200006f906005906020860190620000a5565b50608052600280546001600160a01b039092166001600160a01b0319928316179055600180549091163317905550620002bb9050565b828054620000b39062000268565b90600052602060002090601f016020900481019282620000d7576000855562000122565b82601f10620000f257805160ff191683800117855562000122565b8280016001018555821562000122579182015b828111156200012257825182559160200191906001019062000105565b506200013092915062000134565b5090565b5b8082111562000130576000815560010162000135565b80516001600160a01b03811681146200016357600080fd5b919050565b600080600080608085870312156200017e578384fd5b62000189856200014b565b602086810151919550906001600160401b0380821115620001a8578586fd5b818801915088601f830112620001bc578586fd5b815181811115620001d157620001d1620002a5565b604051601f8201601f1916810185018381118282101715620001f757620001f7620002a5565b60405281815283820185018b10156200020e578788fd5b8792505b8183101562000231578383018501518184018601529184019162000212565b818311156200024257878583830101525b809750505050505062000258604086016200014b565b6060959095015193969295505050565b6002810460018216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b608051612bec620002de6000396000818161132601526121be0152612bec6000f3fe608060405234801561001057600080fd5b506004361061017d5760003560e01c806363186b20116100e3578063c3dcfcf11161008c578063d2c7c2a411610066578063d2c7c2a4146102c2578063eea3dd47146102e8578063f6be71d1146102fb5761017d565b8063c3dcfcf11461029f578063c45a0155146102b2578063c6e89915146102ba5761017d565b8063ac1029f8116100bd578063ac1029f81461027c578063b381ff8214610284578063be307d461461028c5761017d565b806363186b201461024e5780636464abdb146102615780638da5cb5b146102745761017d565b8063128c7001116101455780634ba69faa1161011f5780634ba69faa1461022057806355cc7b38146102285780635fbfdf7d1461023b5761017d565b8063128c7001146101e557806334db3990146101ed5780633f62327d1461020d5761017d565b806306fdde03146101825780630a3ecc6e146101a05780630c58ae78146101b55780630fb5a6b4146101d55780631083b856146101dd575b600080fd5b61018a61030e565b604051610197919061277f565b60405180910390f35b6101b36101ae3660046123cd565b61039c565b005b6101c86101c336600461230f565b610854565b60405161019791906129d5565b6101c86108df565b6101c86108e5565b6101c86108eb565b6102006101fb3660046125f3565b6108f1565b60405161019791906126b1565b6101b361021b36600461259a565b61090c565b610200610a93565b6101b361023636600461260d565b610aa2565b6101b361024936600461238d565b610bc8565b6101b361025c36600461242a565b610f50565b6101b361026f36600461238d565b611246565b610200611315565b6101c8611324565b6101c8611348565b6101c861029a366004612347565b61134e565b6102006102ad3660046124dc565b611572565b610200611781565b610200611790565b6102d56102d0366004612580565b61179f565b60405161019797969594939291906129de565b6101b36102f636600461230f565b611986565b6101b36103093660046125c3565b611cc2565b6005805461031b90612b35565b80601f016020809104026020016040519081016040528092919081815260200182805461034790612b35565b80156103945780601f1061036957610100808354040283529160200191610394565b820191906000526020600020905b81548152906001019060200180831161037757829003601f168201915b505050505081565b600260005414156103c85760405162461bcd60e51b81526004016103bf9061297b565b60405180910390fd5b60026000819055546001600160a01b031633146103f75760405162461bcd60e51b81526004016103bf906128cb565b806104145760405162461bcd60e51b81526004016103bf9061285d565b6006546007546104249042612aee565b11158015610433575060075415155b61044f5760405162461bcd60e51b81526004016103bf906128cb565b60008061045c8484611cf1565b90925090506001821515146104835760405162461bcd60e51b81526004016103bf90612944565b60035460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d906104b49088906004016129b2565b60206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050491906125db565b9050806105118386612a72565b116105c7576003546040516323c4859f60e21b81526001600160a01b0390911690638f12167c9061054a908990899089906004016126e9565b600060405180830381600087803b15801561056457600080fd5b505af1158015610578573d6000803e3d6000fd5b50505050856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a86866040516105b79291906129c1565b60405180910390a250505061084a565b818111156106525760006105db8383612aee565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c90610610908a908a9086906004016126e9565b600060405180830381600087803b15801561062a57600080fd5b505af115801561063e573d6000803e3d6000fd5b50505050808561064e9190612aee565b9450505b60005b600b54811015610802578461066957610802565b6000600a6000600b848154811061069057634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff168352828101939093526040918201812054825163e5a6b10f60e01b815292516001600160a01b0390911694509092849263e5a6b10f9260048083019392829003018186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906122f3565b90506000816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040161076791906126b1565b60206040518083038186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b791906125db565b90508088116107d4576107cb8a8985611f57565b600097506107ec565b6107df8a8285611f57565b6107e98189612aee565b97505b50505080806107fa90612b70565b915050610655565b50856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a868660405161083e9291906129c1565b60405180910390a25050505b5050600160005550565b600080805b6009548110156108d75760006009828154811061088657634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff1690506108b786868361134e565b6108c19084612a72565b92505080806108cf90612b70565b915050610859565b509392505050565b60065481565b600b5490565b60075481565b600a602052600090815260409020546001600160a01b031681565b6002600054141561092f5760405162461bcd60e51b81526004016103bf9061297b565b6002600055806109515760405162461bcd60e51b81526004016103bf9061285d565b6003546040805163e5a6b10f60e01b815290516109e3926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906122f3565b60035433906001600160a01b031684611fbc565b600354604051633f62327d60e01b81526001600160a01b0390911690633f62327d90610a1590859085906004016129c1565b600060405180830381600087803b158015610a2f57600080fd5b505af1158015610a43573d6000803e3d6000fd5b50505050306001600160a01b03167f6f478da447863bf1d87ffc6967f8ba188546e83cc222b62f2e70fd993cfdafa98383604051610a829291906129c1565b60405180910390a250506001600055565b6003546001600160a01b031681565b6004546001600160a01b03163314610acc5760405162461bcd60e51b81526004016103bf906128cb565b6000600a6000600b8560ff1681548110610af657634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528301939093526040909101812054600b80546001600160a01b039092169450600a939091908616908110610b5a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528381019490945260409283018220549681168252600a90935281812080546001600160a01b03199081166001600160a01b039889161790915594909216825290208054919093169116179055565b60026000541415610beb5760405162461bcd60e51b81526004016103bf9061297b565b600260005560075415610c105760405162461bcd60e51b81526004016103bf90612894565b600e546001600160a01b0383166000908152600c60205260409020541480610c4f57506001600160a01b0382166000908152600c602052604090205415155b610c6b5760405162461bcd60e51b81526004016103bf90612792565b80610c885760405162461bcd60e51b81526004016103bf9061285d565b6000826001600160a01b0316632565b1596040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb91906125db565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3857600080fd5b505afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7091906125db565b9050610d7c8184612a72565b821015610d9b5760405162461bcd60e51b81526004016103bf90612826565b6000846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e91906122f3565b9050610e1c81878787611fbc565b604051637e348b7d60e01b81526001600160a01b03861690637e348b7d90610e4a908990889060040161270e565b600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b5050600e546001600160a01b0388166000908152600c6020526040902054149150610ed29050576001600160a01b0385166000908152600c602052604081208054869290610ec7908490612a72565b925050819055610eef565b6001600160a01b0385166000908152600c60205260409020849055835b50610ef86120c1565b846001600160a01b0316866001600160a01b03167fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f86604051610f3b91906129d5565b60405180910390a35050600160005550505050565b6004546001600160a01b03163314610f7a5760405162461bcd60e51b81526004016103bf906128cb565b600954600090610f8b576000610fe9565b60098054610f9b90600190612aee565b81548110610fb957634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff166001610fe99190612a4c565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f9092166002026101000a61ffff81810219909316928416029190911790556040805160e0810182528481526001600160a01b038a166020808301919091528251601f8d0182900482028101820184528c8152939450909291830191908c908c9081908401838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250506103e86020808501919091526001604094850181905261ffff871684526008825292849020855181558582015193810180546001600160a01b0319166001600160a01b03909516949094179093559284015180519293611178936002860193509101906121eb565b50606082015180516111949160038401916020909101906121eb565b50608082015180516111b09160048401916020909101906121eb565b5060a08201516005909101805460c0909301511515620100000262ff00001961ffff90931661ffff1990941693909317919091169190911790556006548211156111fa5760068290555b306001600160a01b03167fbcf8a46c68576cc4e52eb8fbc678b3ce3adbeadb33126980d791f827ccff41118260405161123391906129b2565b60405180910390a2505050505050505050565b6001546001600160a01b031633146112705760405162461bcd60e51b81526004016103bf906128cb565b604051635800f04d60e11b81526001600160a01b0384169063b001e09a9061129e908590859060040161270e565b602060405180830381600087803b1580156112b857600080fd5b505af11580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f091906122f3565b600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b6004546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095490565b6001600160a01b0382166000908152600c6020526040812054158061138c5750600e546001600160a01b0384166000908152600c6020526040902054145b806113975750600d54155b156113a45750600061156b565b6003546040516306c91eaf60e41b81526000916001600160a01b031690636c91eaf0906113d59086906004016129b2565b60206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142591906125db565b90506000846001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161145591906126b1565b60206040518083038186803b15801561146d57600080fd5b505afa158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a591906125db565b600d546001600160a01b0387166000908152600c6020526040812054929350916114cf9190612acf565b90506000866001600160a01b031663bd30558e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561150c57600080fd5b505afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154491906125db565b61154e8486612acf565b6115589190612acf565b90506115648282612aaf565b9450505050505b9392505050565b6004546000906001600160a01b0316331461159f5760405162461bcd60e51b81526004016103bf906128cb565b600b54604051634f35e6d560e01b81526001600160a01b03871690634f35e6d5906115dc908d908d908d908d9030908d908d908d90600401612727565b602060405180830381600087803b1580156115f657600080fd5b505af115801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e91906122f3565b91506000808211611640576000611697565b600b61164d600184612aee565b8154811061166b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016116979190612a8a565b600b80546001810190915560208082047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805460ff808616601f9095166101000a8581029102199091161790556000918252600a90526040812080546001600160a01b0387166001600160a01b0319909116179055600d80549293508792909190611724908490612a72565b9091555050600e546001600160a01b0384166000818152600c6020526040808220939093559151909130917f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd583802179190a3505098975050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031681565b60086020526000908152604090208054600182015460028301805492936001600160a01b03909216926117d190612b35565b80601f01602080910402602001604051908101604052809291908181526020018280546117fd90612b35565b801561184a5780601f1061181f5761010080835404028352916020019161184a565b820191906000526020600020905b81548152906001019060200180831161182d57829003601f168201915b50505050509080600301805461185f90612b35565b80601f016020809104026020016040519081016040528092919081815260200182805461188b90612b35565b80156118d85780601f106118ad576101008083540402835291602001916118d8565b820191906000526020600020905b8154815290600101906020018083116118bb57829003601f168201915b5050505050908060040180546118ed90612b35565b80601f016020809104026020016040519081016040528092919081815260200182805461191990612b35565b80156119665780601f1061193b57610100808354040283529160200191611966565b820191906000526020600020905b81548152906001019060200180831161194957829003601f168201915b5050506005909301549192505061ffff81169060ff620100009091041687565b600260005414156119a95760405162461bcd60e51b81526004016103bf9061297b565b6002600055600754158015906119cc57506006546007546119ca9042612aee565b115b6119e85760405162461bcd60e51b81526004016103bf906128cb565b6001600160a01b0381166000908152600c602052604090205415801590611a295750600e546001600160a01b0382166000908152600c602052604090205414155b611a455760405162461bcd60e51b81526004016103bf90612902565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611a749086906004016126b1565b60206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac491906125db565b905080611ae35760405162461bcd60e51b81526004016103bf9061285d565b60005b600954811015611c2157600060098281548110611b1357634e487b7160e01b600052603260045260246000fd5b6000918252602090912060108204015460035460405163bcd84a7160e01b8152600f9093166002026101000a90910461ffff1692506001600160a01b03169063bcd84a7190611b669084906004016129b2565b600060405180830381600087803b158015611b8057600080fd5b505af1158015611b94573d6000803e3d6000fd5b505050506000611ba586868461134e565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c90611bda908990869086906004016126e9565b600060405180830381600087803b158015611bf457600080fd5b505af1158015611c08573d6000803e3d6000fd5b5050505050508080611c1990612b70565b915050611ae6565b50604051635f6fbbd360e11b81526001600160a01b0383169063bedf77a690611c4e9086906004016126b1565b600060405180830381600087803b158015611c6857600080fd5b505af1158015611c7c573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f3fdbe9ffcd54f2ab6b430c78a338bde8aefdc06f4720928defb03e50e9da853290600090a35050600160005550565b6004546001600160a01b03163314611cec5760405162461bcd60e51b81526004016103bf906128cb565b600655565b60035460405163cfbff97d60e01b8152600091829182916001600160a01b03169063cfbff97d90611d269088906004016129b2565b60206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906125db565b600b54909150600160005b82811015611ea6576000600a6000600b8481548110611db057634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820181205482516318160ddd60e01b815292516001600160a01b039091169450909284926318160ddd9260048083019392829003018186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5791906125db565b9050611e638187612a72565b9550838015611e7157508015155b8015611e875750611e83600186612aee565b8314155b15611e9157600093505b50508080611e9e90612b70565b915050611d81565b5080611f3957600360009054906101000a90046001600160a01b03166001600160a01b031663087d8d016040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611efc57600080fd5b505af1158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906125db565b611f3c565b60005b9350611f488487612a72565b83101594505050509250929050565b6040516301e51e9760e01b81526001600160a01b038216906301e51e9790611f85908690869060040161270e565b600060405180830381600087803b158015611f9f57600080fd5b505af1158015611fb3573d6000803e3d6000fd5b50505050505050565b600080856001600160a01b03166323b872dd868686604051602401611fe3939291906126c5565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516120319190612695565b6000604051808303816000865af19150503d806000811461206e576040519150601f19603f3d011682016040523d82523d6000602084013e612073565b606091505b509150915081801561209d57508051158061209d57508080602001905181019061209d919061240a565b6120b95760405162461bcd60e51b81526004016103bf906127c9565b505050505050565b6000805b600b548110156121bb576000600a6000600b84815481106120f657634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b15801561216357600080fd5b505afa158015612177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219b91906125db565b6121a59084612a72565b92505080806121b390612b70565b9150506120c5565b507f000000000000000000000000000000000000000000000000000000000000000081106121e857426007555b50565b8280546121f790612b35565b90600052602060002090601f016020900481019282612219576000855561225f565b82601f1061223257805160ff191683800117855561225f565b8280016001018555821561225f579182015b8281111561225f578251825591602001919060010190612244565b5061226b92915061226f565b5090565b5b8082111561226b5760008155600101612270565b60008083601f840112612295578182fd5b50813567ffffffffffffffff8111156122ac578182fd5b6020830191508360208285010111156122c457600080fd5b9250929050565b803561ffff811681146122dd57600080fd5b919050565b803560ff811681146122dd57600080fd5b600060208284031215612304578081fd5b815161156b81612ba1565b60008060408385031215612321578081fd5b823561232c81612ba1565b9150602083013561233c81612ba1565b809150509250929050565b60008060006060848603121561235b578081fd5b833561236681612ba1565b9250602084013561237681612ba1565b9150612384604085016122cb565b90509250925092565b6000806000606084860312156123a1578283fd5b83356123ac81612ba1565b925060208401356123bc81612ba1565b929592945050506040919091013590565b6000806000606084860312156123e1578283fd5b83356123ec81612ba1565b92506123fa602085016122cb565b9150604084013590509250925092565b60006020828403121561241b578081fd5b8151801515811461156b578182fd5b60008060008060008060008060a0898b031215612445578384fd5b883567ffffffffffffffff8082111561245c578586fd5b6124688c838d01612284565b909a50985060208b0135915061247d82612ba1565b90965060408a01359080821115612492578586fd5b61249e8c838d01612284565b909750955060608b01359150808211156124b6578485fd5b506124c38b828c01612284565b999c989b50969995989497949560800135949350505050565b60008060008060008060008060c0898b0312156124f7578384fd5b883567ffffffffffffffff8082111561250e578586fd5b61251a8c838d01612284565b909a50985060208b0135915080821115612532578586fd5b5061253f8b828c01612284565b909750955050604089013561255381612ba1565b9350606089013561256381612ba1565b979a969950949793969295929450505060808201359160a0013590565b600060208284031215612591578081fd5b61156b826122cb565b600080604083850312156125ac578182fd5b6125b5836122cb565b946020939093013593505050565b6000602082840312156125d4578081fd5b5035919050565b6000602082840312156125ec578081fd5b5051919050565b600060208284031215612604578081fd5b61156b826122e2565b6000806040838503121561261f578182fd5b612628836122e2565b9150612636602084016122e2565b90509250929050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612681816020860160208601612b05565b601f01601f19169290920160200192915050565b600082516126a7818460208701612b05565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835261ffff919091166020830152604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060c0825261273b60c083018a8c61263f565b828103602084015261274e81898b61263f565b6001600160a01b03978816604085015295909616606083015250608081019290925260a09091015295945050505050565b60006020825261156b6020830184612669565b60208082526019908201527f556e6f52653a205269736b506f6f6c206e6f7420657869737400000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a205269736b506f6f6c206f766572666c6f770000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526018908201527f556e6f52653a205374616b696e672077617320456e6465640000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b60208082526022908201527f556e6f52653a205269736b506f6f6c206e6f74206578697374206f7220656d70604082015261747960f01b606082015260800190565b6020808252601c908201527f556e6f52653a204361706974616c206973206e6f7420656e6f75676800000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff91909116815260200190565b61ffff929092168252602082015260400190565b90815260200190565b60008882526001600160a01b038816602083015260e06040830152612a0660e0830188612669565b8281036060840152612a188188612669565b90508281036080840152612a2c8187612669565b61ffff9590951660a0840152505090151560c09091015295945050505050565b600061ffff808316818516808303821115612a6957612a69612b8b565b01949350505050565b60008219821115612a8557612a85612b8b565b500190565b600060ff821660ff84168060ff03821115612aa757612aa7612b8b565b019392505050565b600082612aca57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612ae957612ae9612b8b565b500290565b600082821015612b0057612b00612b8b565b500390565b60005b83811015612b20578181015183820152602001612b08565b83811115612b2f576000848401525b50505050565b600281046001821680612b4957607f821691505b60208210811415612b6a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612b8457612b84612b8b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146121e857600080fdfea26469706673582212204ce62b9e48d2cccaab5293ba0a769de65624a78afaee9d4c03c0fa2149bf58fe64736f6c63430008000033a2646970667358221220e5ff8125326ee60c61c30d0ed37aabe0a20aebb36db84b9452a0e29f273d5c7864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3204,
        "contract": "contracts/factories/CohortFactory.sol:CohortFactory",
        "label": "actuary",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}